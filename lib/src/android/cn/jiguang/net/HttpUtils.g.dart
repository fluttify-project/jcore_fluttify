// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:jcore_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';

class cn_jiguang_net_HttpUtils extends java_lang_Object  {
  //region constants
  static const String name__ = 'cn.jiguang.net.HttpUtils';

  @override
  final String tag__ = 'jcore_fluttify';

  
  //endregion

  //region creators
  static Future<cn_jiguang_net_HttpUtils> create__() async {
    final __result__ = await kJcoreFluttifyChannel.invokeMethod(
      'ObjectFactory::createcn_jiguang_net_HttpUtils__',
    
    );
    return JcoreFluttifyAndroidAs<cn_jiguang_net_HttpUtils>(__result__);
  }
  
  static Future<List<cn_jiguang_net_HttpUtils>> create_batch__(int length) async {
    assert(true);
    final __result_batch__ = await  kJcoreFluttifyChannel.invokeListMethod(
      'ObjectFactory::create_batchcn_jiguang_net_HttpUtils__',
      {'length': length}
    );
    return __result_batch__
        .map((it) => JcoreFluttifyAndroidAs<cn_jiguang_net_HttpUtils>(it))
        .toList();
  }
  
  //endregion

  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  static Future<cn_jiguang_net_HttpResponse> httpGet__android_content_Context__cn_jiguang_net_HttpRequest(android_content_Context var0, cn_jiguang_net_HttpRequest var1) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: cn.jiguang.net.HttpUtils::httpGet([])');
    }
  
    // invoke native method
    final __result__ = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.net.HttpUtils::httpGet__android_content_Context__cn_jiguang_net_HttpRequest', {"var0": var0, "var1": var1});
  
  
    // handle native call
  
  
    return JcoreFluttifyAndroidAs<cn_jiguang_net_HttpResponse>(__result__);
  }
  
  
  static Future<cn_jiguang_net_HttpResponse> httpGet__android_content_Context__String(android_content_Context var0, String var1) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: cn.jiguang.net.HttpUtils::httpGet([\'var1\':$var1])');
    }
  
    // invoke native method
    final __result__ = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.net.HttpUtils::httpGet__android_content_Context__String', {"var0": var0, "var1": var1});
  
  
    // handle native call
  
  
    return JcoreFluttifyAndroidAs<cn_jiguang_net_HttpResponse>(__result__);
  }
  
  
  static Future<String> httpGetString__android_content_Context__cn_jiguang_net_HttpRequest(android_content_Context var0, cn_jiguang_net_HttpRequest var1) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: cn.jiguang.net.HttpUtils::httpGetString([])');
    }
  
    // invoke native method
    final __result__ = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.net.HttpUtils::httpGetString__android_content_Context__cn_jiguang_net_HttpRequest', {"var0": var0, "var1": var1});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<String> httpGetString__android_content_Context__String(android_content_Context var0, String var1) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: cn.jiguang.net.HttpUtils::httpGetString([\'var1\':$var1])');
    }
  
    // invoke native method
    final __result__ = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.net.HttpUtils::httpGetString__android_content_Context__String', {"var0": var0, "var1": var1});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<cn_jiguang_net_HttpResponse> httpPost__android_content_Context__cn_jiguang_net_HttpRequest(android_content_Context var0, cn_jiguang_net_HttpRequest var1) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: cn.jiguang.net.HttpUtils::httpPost([])');
    }
  
    // invoke native method
    final __result__ = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.net.HttpUtils::httpPost__android_content_Context__cn_jiguang_net_HttpRequest', {"var0": var0, "var1": var1});
  
  
    // handle native call
  
  
    return JcoreFluttifyAndroidAs<cn_jiguang_net_HttpResponse>(__result__);
  }
  
  
  static Future<cn_jiguang_net_HttpResponse> httpPost__android_content_Context__String(android_content_Context var0, String var1) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: cn.jiguang.net.HttpUtils::httpPost([\'var1\':$var1])');
    }
  
    // invoke native method
    final __result__ = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.net.HttpUtils::httpPost__android_content_Context__String', {"var0": var0, "var1": var1});
  
  
    // handle native call
  
  
    return JcoreFluttifyAndroidAs<cn_jiguang_net_HttpResponse>(__result__);
  }
  
  
  static Future<String> httpPostString__android_content_Context__String(android_content_Context var0, String var1) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: cn.jiguang.net.HttpUtils::httpPostString([\'var1\':$var1])');
    }
  
    // invoke native method
    final __result__ = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.net.HttpUtils::httpPostString__android_content_Context__String', {"var0": var0, "var1": var1});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<String> httpPostString__android_content_Context__String__Map_String_String_(android_content_Context var0, String var1, Map<String,String> var2) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: cn.jiguang.net.HttpUtils::httpPostString([\'var1\':$var1, \'var2\':$var2])');
    }
  
    // invoke native method
    final __result__ = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.net.HttpUtils::httpPostString__android_content_Context__String__Map_String_String_', {"var0": var0, "var1": var1, "var2": var2});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<String> getUrlWithParas(String var0, Map<String,String> var1) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: cn.jiguang.net.HttpUtils::getUrlWithParas([\'var0\':$var0, \'var1\':$var1])');
    }
  
    // invoke native method
    final __result__ = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.net.HttpUtils::getUrlWithParas', {"var0": var0, "var1": var1});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<String> getUrlWithValueEncodeParas(String var0, Map<String,String> var1) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: cn.jiguang.net.HttpUtils::getUrlWithValueEncodeParas([\'var0\':$var0, \'var1\':$var1])');
    }
  
    // invoke native method
    final __result__ = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.net.HttpUtils::getUrlWithValueEncodeParas', {"var0": var0, "var1": var1});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<String> joinParas(Map<String,String> var0) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: cn.jiguang.net.HttpUtils::joinParas([\'var0\':$var0])');
    }
  
    // invoke native method
    final __result__ = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.net.HttpUtils::joinParas', {"var0": var0});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<String> joinParasWithEncodedValue(Map<String,String> var0) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: cn.jiguang.net.HttpUtils::joinParasWithEncodedValue([\'var0\':$var0])');
    }
  
    // invoke native method
    final __result__ = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.net.HttpUtils::joinParasWithEncodedValue', {"var0": var0});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<String> appendParaToUrl(String var0, String var1, String var2) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: cn.jiguang.net.HttpUtils::appendParaToUrl([\'var0\':$var0, \'var1\':$var1, \'var2\':$var2])');
    }
  
    // invoke native method
    final __result__ = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.net.HttpUtils::appendParaToUrl', {"var0": var0, "var1": var1, "var2": var2});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<int> parseGmtTime(String var0) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: cn.jiguang.net.HttpUtils::parseGmtTime([\'var0\':$var0])');
    }
  
    // invoke native method
    final __result__ = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.net.HttpUtils::parseGmtTime', {"var0": var0});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  //endregion

  @override
  String toString() {
    return 'cn_jiguang_net_HttpUtils{refId: $refId, runtimeType: $runtimeType, tag__: $tag__}';
  }
}

extension cn_jiguang_net_HttpUtils_Batch on List<cn_jiguang_net_HttpUtils> {
  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  static Future<List<cn_jiguang_net_HttpResponse>> httpGet__android_content_Context__cn_jiguang_net_HttpRequest_batch(List<android_content_Context> var0, List<cn_jiguang_net_HttpRequest> var1) async {
    assert(var0.length == var1.length);
  
    // invoke native method
    final resultBatch = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.net.HttpUtils::httpGet__android_content_Context__cn_jiguang_net_HttpRequest_batch', [for (int __i__ = 0; __i__ < var0.length; __i__++) {"var0": var0[__i__], "var1": var1[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => JcoreFluttifyAndroidAs<cn_jiguang_net_HttpResponse>(__result__)).cast<cn_jiguang_net_HttpResponse>().toList();
  }
  
  
  static Future<List<cn_jiguang_net_HttpResponse>> httpGet__android_content_Context__String_batch(List<android_content_Context> var0, List<String> var1) async {
    assert(var0.length == var1.length);
  
    // invoke native method
    final resultBatch = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.net.HttpUtils::httpGet__android_content_Context__String_batch', [for (int __i__ = 0; __i__ < var0.length; __i__++) {"var0": var0[__i__], "var1": var1[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => JcoreFluttifyAndroidAs<cn_jiguang_net_HttpResponse>(__result__)).cast<cn_jiguang_net_HttpResponse>().toList();
  }
  
  
  static Future<List<String>> httpGetString__android_content_Context__cn_jiguang_net_HttpRequest_batch(List<android_content_Context> var0, List<cn_jiguang_net_HttpRequest> var1) async {
    assert(var0.length == var1.length);
  
    // invoke native method
    final resultBatch = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.net.HttpUtils::httpGetString__android_content_Context__cn_jiguang_net_HttpRequest_batch', [for (int __i__ = 0; __i__ < var0.length; __i__++) {"var0": var0[__i__], "var1": var1[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<String>().toList();
  }
  
  
  static Future<List<String>> httpGetString__android_content_Context__String_batch(List<android_content_Context> var0, List<String> var1) async {
    assert(var0.length == var1.length);
  
    // invoke native method
    final resultBatch = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.net.HttpUtils::httpGetString__android_content_Context__String_batch', [for (int __i__ = 0; __i__ < var0.length; __i__++) {"var0": var0[__i__], "var1": var1[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<String>().toList();
  }
  
  
  static Future<List<cn_jiguang_net_HttpResponse>> httpPost__android_content_Context__cn_jiguang_net_HttpRequest_batch(List<android_content_Context> var0, List<cn_jiguang_net_HttpRequest> var1) async {
    assert(var0.length == var1.length);
  
    // invoke native method
    final resultBatch = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.net.HttpUtils::httpPost__android_content_Context__cn_jiguang_net_HttpRequest_batch', [for (int __i__ = 0; __i__ < var0.length; __i__++) {"var0": var0[__i__], "var1": var1[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => JcoreFluttifyAndroidAs<cn_jiguang_net_HttpResponse>(__result__)).cast<cn_jiguang_net_HttpResponse>().toList();
  }
  
  
  static Future<List<cn_jiguang_net_HttpResponse>> httpPost__android_content_Context__String_batch(List<android_content_Context> var0, List<String> var1) async {
    assert(var0.length == var1.length);
  
    // invoke native method
    final resultBatch = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.net.HttpUtils::httpPost__android_content_Context__String_batch', [for (int __i__ = 0; __i__ < var0.length; __i__++) {"var0": var0[__i__], "var1": var1[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => JcoreFluttifyAndroidAs<cn_jiguang_net_HttpResponse>(__result__)).cast<cn_jiguang_net_HttpResponse>().toList();
  }
  
  
  static Future<List<String>> httpPostString__android_content_Context__String_batch(List<android_content_Context> var0, List<String> var1) async {
    assert(var0.length == var1.length);
  
    // invoke native method
    final resultBatch = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.net.HttpUtils::httpPostString__android_content_Context__String_batch', [for (int __i__ = 0; __i__ < var0.length; __i__++) {"var0": var0[__i__], "var1": var1[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<String>().toList();
  }
  
  
  static Future<List<String>> httpPostString__android_content_Context__String__Map_String_String__batch(List<android_content_Context> var0, List<String> var1, List<Map<String,String>> var2) async {
    assert(var0.length == var1.length && var1.length == var2.length);
  
    // invoke native method
    final resultBatch = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.net.HttpUtils::httpPostString__android_content_Context__String__Map_String_String__batch', [for (int __i__ = 0; __i__ < var0.length; __i__++) {"var0": var0[__i__], "var1": var1[__i__], "var2": var2[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<String>().toList();
  }
  
  
  static Future<List<String>> getUrlWithParas_batch(List<String> var0, List<Map<String,String>> var1) async {
    assert(var0.length == var1.length);
  
    // invoke native method
    final resultBatch = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.net.HttpUtils::getUrlWithParas_batch', [for (int __i__ = 0; __i__ < var0.length; __i__++) {"var0": var0[__i__], "var1": var1[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<String>().toList();
  }
  
  
  static Future<List<String>> getUrlWithValueEncodeParas_batch(List<String> var0, List<Map<String,String>> var1) async {
    assert(var0.length == var1.length);
  
    // invoke native method
    final resultBatch = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.net.HttpUtils::getUrlWithValueEncodeParas_batch', [for (int __i__ = 0; __i__ < var0.length; __i__++) {"var0": var0[__i__], "var1": var1[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<String>().toList();
  }
  
  
  static Future<List<String>> joinParas_batch(List<Map<String,String>> var0) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.net.HttpUtils::joinParas_batch', [for (int __i__ = 0; __i__ < var0.length; __i__++) {"var0": var0[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<String>().toList();
  }
  
  
  static Future<List<String>> joinParasWithEncodedValue_batch(List<Map<String,String>> var0) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.net.HttpUtils::joinParasWithEncodedValue_batch', [for (int __i__ = 0; __i__ < var0.length; __i__++) {"var0": var0[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<String>().toList();
  }
  
  
  static Future<List<String>> appendParaToUrl_batch(List<String> var0, List<String> var1, List<String> var2) async {
    assert(var0.length == var1.length && var1.length == var2.length);
  
    // invoke native method
    final resultBatch = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.net.HttpUtils::appendParaToUrl_batch', [for (int __i__ = 0; __i__ < var0.length; __i__++) {"var0": var0[__i__], "var1": var1[__i__], "var2": var2[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<String>().toList();
  }
  
  
  static Future<List<int>> parseGmtTime_batch(List<String> var0) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.net.HttpUtils::parseGmtTime_batch', [for (int __i__ = 0; __i__ < var0.length; __i__++) {"var0": var0[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<int>().toList();
  }
  
  //endregion
}