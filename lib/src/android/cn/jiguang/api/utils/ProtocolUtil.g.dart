// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:jcore_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';

class cn_jiguang_api_utils_ProtocolUtil extends java_lang_Object  {
  //region constants
  static const String name__ = 'cn.jiguang.api.utils.ProtocolUtil';

  @override
  final String tag__ = 'jcore_fluttify';

  
  //endregion

  //region creators
  static Future<cn_jiguang_api_utils_ProtocolUtil> create__() async {
    final __result__ = await kJcoreFluttifyChannel.invokeMethod(
      'ObjectFactory::createcn_jiguang_api_utils_ProtocolUtil__',
    
    );
    return JcoreFluttifyAndroidAs<cn_jiguang_api_utils_ProtocolUtil>(__result__);
  }
  
  static Future<List<cn_jiguang_api_utils_ProtocolUtil>> create_batch__(int length) async {
    assert(true);
    final __result_batch__ = await  kJcoreFluttifyChannel.invokeListMethod(
      'ObjectFactory::create_batchcn_jiguang_api_utils_ProtocolUtil__',
      {'length': length}
    );
    return __result_batch__
        .map((it) => JcoreFluttifyAndroidAs<cn_jiguang_api_utils_ProtocolUtil>(it))
        .toList();
  }
  
  //endregion

  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  static Future<Uint8List> tlv2ToByteArray(String var0) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: cn.jiguang.api.utils.ProtocolUtil::tlv2ToByteArray([\'var0\':$var0])');
    }
  
    // invoke native method
    final __result__ = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.utils.ProtocolUtil::tlv2ToByteArray', {"var0": var0});
  
  
    // handle native call
  
  
    return __result__ as Uint8List;
  }
  
  
  static Future<Uint8List> fixedStringToBytes(String var0, int var1) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: cn.jiguang.api.utils.ProtocolUtil::fixedStringToBytes([\'var0\':$var0, \'var1\':$var1])');
    }
  
    // invoke native method
    final __result__ = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.utils.ProtocolUtil::fixedStringToBytes', {"var0": var0, "var1": var1});
  
  
    // handle native call
  
  
    return __result__ as Uint8List;
  }
  
  
  static Future<void> fillIntData(Uint8List var0, int var1, int var2) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: cn.jiguang.api.utils.ProtocolUtil::fillIntData([\'var0\':$var0, \'var1\':$var1, \'var2\':$var2])');
    }
  
    // invoke native method
    final __result__ = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.utils.ProtocolUtil::fillIntData', {"var0": var0, "var1": var1, "var2": var2});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<void> fillStringData(Uint8List var0, String var1, int var2) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: cn.jiguang.api.utils.ProtocolUtil::fillStringData([\'var0\':$var0, \'var1\':$var1, \'var2\':$var2])');
    }
  
    // invoke native method
    final __result__ = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.utils.ProtocolUtil::fillStringData', {"var0": var0, "var1": var1, "var2": var2});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<Uint8List> getDefaultByte(int var0) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: cn.jiguang.api.utils.ProtocolUtil::getDefaultByte([\'var0\':$var0])');
    }
  
    // invoke native method
    final __result__ = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.utils.ProtocolUtil::getDefaultByte', {"var0": var0});
  
  
    // handle native call
  
  
    return __result__ as Uint8List;
  }
  
  
  static Future<Uint8List> int2ByteArray(int var0) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: cn.jiguang.api.utils.ProtocolUtil::int2ByteArray([\'var0\':$var0])');
    }
  
    // invoke native method
    final __result__ = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.utils.ProtocolUtil::int2ByteArray', {"var0": var0});
  
  
    // handle native call
  
  
    return __result__ as Uint8List;
  }
  
  
  static Future<Uint8List> long2ByteArray(int var0) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: cn.jiguang.api.utils.ProtocolUtil::long2ByteArray([\'var0\':$var0])');
    }
  
    // invoke native method
    final __result__ = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.utils.ProtocolUtil::long2ByteArray', {"var0": var0});
  
  
    // handle native call
  
  
    return __result__ as Uint8List;
  }
  
  //endregion

  @override
  String toString() {
    return 'cn_jiguang_api_utils_ProtocolUtil{refId: $refId, runtimeType: $runtimeType, tag__: $tag__}';
  }
}

extension cn_jiguang_api_utils_ProtocolUtil_Batch on List<cn_jiguang_api_utils_ProtocolUtil> {
  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  static Future<List<Uint8List>> tlv2ToByteArray_batch(List<String> var0) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.utils.ProtocolUtil::tlv2ToByteArray_batch', [for (int __i__ = 0; __i__ < var0.length; __i__++) {"var0": var0[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__ as Uint8List).cast<Uint8List>().toList();
  }
  
  
  static Future<List<Uint8List>> fixedStringToBytes_batch(List<String> var0, List<int> var1) async {
    assert(var0.length == var1.length);
  
    // invoke native method
    final resultBatch = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.utils.ProtocolUtil::fixedStringToBytes_batch', [for (int __i__ = 0; __i__ < var0.length; __i__++) {"var0": var0[__i__], "var1": var1[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__ as Uint8List).cast<Uint8List>().toList();
  }
  
  
  static Future<List<void>> fillIntData_batch(List<Uint8List> var0, List<int> var1, List<int> var2) async {
    assert(var0.length == var1.length && var1.length == var2.length);
  
    // invoke native method
    final resultBatch = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.utils.ProtocolUtil::fillIntData_batch', [for (int __i__ = 0; __i__ < var0.length; __i__++) {"var0": var0[__i__], "var1": var1[__i__], "var2": var2[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  static Future<List<void>> fillStringData_batch(List<Uint8List> var0, List<String> var1, List<int> var2) async {
    assert(var0.length == var1.length && var1.length == var2.length);
  
    // invoke native method
    final resultBatch = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.utils.ProtocolUtil::fillStringData_batch', [for (int __i__ = 0; __i__ < var0.length; __i__++) {"var0": var0[__i__], "var1": var1[__i__], "var2": var2[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  static Future<List<Uint8List>> getDefaultByte_batch(List<int> var0) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.utils.ProtocolUtil::getDefaultByte_batch', [for (int __i__ = 0; __i__ < var0.length; __i__++) {"var0": var0[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__ as Uint8List).cast<Uint8List>().toList();
  }
  
  
  static Future<List<Uint8List>> int2ByteArray_batch(List<int> var0) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.utils.ProtocolUtil::int2ByteArray_batch', [for (int __i__ = 0; __i__ < var0.length; __i__++) {"var0": var0[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__ as Uint8List).cast<Uint8List>().toList();
  }
  
  
  static Future<List<Uint8List>> long2ByteArray_batch(List<int> var0) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.utils.ProtocolUtil::long2ByteArray_batch', [for (int __i__ = 0; __i__ < var0.length; __i__++) {"var0": var0[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__ as Uint8List).cast<Uint8List>().toList();
  }
  
  //endregion
}