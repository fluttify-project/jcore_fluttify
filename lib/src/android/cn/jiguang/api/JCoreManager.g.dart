// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:jcore_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';

class cn_jiguang_api_JCoreManager extends java_lang_Object  {
  //region constants
  static const String name__ = 'cn.jiguang.api.JCoreManager';

  @override
  final String tag__ = 'jcore_fluttify';

  
  //endregion

  //region creators
  static Future<cn_jiguang_api_JCoreManager> create__() async {
    final __result__ = await kJcoreFluttifyChannel.invokeMethod(
      'ObjectFactory::createcn_jiguang_api_JCoreManager__',
    
    );
    return JcoreFluttifyAndroidAs<cn_jiguang_api_JCoreManager>(__result__);
  }
  
  static Future<List<cn_jiguang_api_JCoreManager>> create_batch__(int length) async {
    assert(true);
    final __result_batch__ = await  kJcoreFluttifyChannel.invokeListMethod(
      'ObjectFactory::create_batchcn_jiguang_api_JCoreManager__',
      {'length': length}
    );
    return __result_batch__
        .map((it) => JcoreFluttifyAndroidAs<cn_jiguang_api_JCoreManager>(it))
        .toList();
  }
  
  //endregion

  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  static Future<void> init(android_content_Context var0) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: cn.jiguang.api.JCoreManager::init([])');
    }
  
    // invoke native method
    final __result__ = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreManager::init', {"var0": var0});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<void> register(android_content_Context var0, String var1) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: cn.jiguang.api.JCoreManager::register([\'var1\':$var1])');
    }
  
    // invoke native method
    final __result__ = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreManager::register', {"var0": var0, "var1": var1});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<void> unRegister(android_content_Context var0) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: cn.jiguang.api.JCoreManager::unRegister([])');
    }
  
    // invoke native method
    final __result__ = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreManager::unRegister', {"var0": var0});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<void> changeLiveStatus(bool var0) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: cn.jiguang.api.JCoreManager::changeLiveStatus([\'var0\':$var0])');
    }
  
    // invoke native method
    final __result__ = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreManager::changeLiveStatus', {"var0": var0});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<void> setLBSEnable(android_content_Context var0, bool var1) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: cn.jiguang.api.JCoreManager::setLBSEnable([\'var1\':$var1])');
    }
  
    // invoke native method
    final __result__ = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreManager::setLBSEnable', {"var0": var0, "var1": var1});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<void> setDebugMode(bool var0) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: cn.jiguang.api.JCoreManager::setDebugMode([\'var0\':$var0])');
    }
  
    // invoke native method
    final __result__ = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreManager::setDebugMode', {"var0": var0});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<bool> getDebugMode() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: cn.jiguang.api.JCoreManager::getDebugMode([])');
    }
  
    // invoke native method
    final __result__ = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreManager::getDebugMode', );
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<bool> isInternal() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: cn.jiguang.api.JCoreManager::isInternal([])');
    }
  
    // invoke native method
    final __result__ = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreManager::isInternal', );
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<void> addDispatchAction(String var0, String var1) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: cn.jiguang.api.JCoreManager::addDispatchAction([\'var0\':$var0, \'var1\':$var1])');
    }
  
    // invoke native method
    final __result__ = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreManager::addDispatchAction', {"var0": var0, "var1": var1});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<Object> onEvent__android_content_Context__String__int__String__android_os_Bundle__Object(android_content_Context var0, String var1, int var2, String var3, android_os_Bundle var4, Object var5) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: cn.jiguang.api.JCoreManager::onEvent([\'var1\':$var1, \'var2\':$var2, \'var3\':$var3, \'var5\':$var5])');
    }
  
    // invoke native method
    final __result__ = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreManager::onEvent__android_content_Context__String__int__String__android_os_Bundle__Object', {"var0": var0, "var1": var1, "var2": var2, "var3": var3, "var4": var4, "var5": var5});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<Object> onEvent__android_content_Context__String__int__bool__String__android_os_Bundle__Object(android_content_Context var0, String var1, int var2, bool var3, String var4, android_os_Bundle var5, Object var6) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: cn.jiguang.api.JCoreManager::onEvent([\'var1\':$var1, \'var2\':$var2, \'var3\':$var3, \'var4\':$var4, \'var6\':$var6])');
    }
  
    // invoke native method
    final __result__ = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreManager::onEvent__android_content_Context__String__int__bool__String__android_os_Bundle__Object', {"var0": var0, "var1": var1, "var2": var2, "var3": var3, "var4": var4, "var5": var5, "var6": var6});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<void> setAnalysisAction(cn_jiguang_api_JAnalyticsAction var0) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: cn.jiguang.api.JCoreManager::setAnalysisAction([])');
    }
  
    // invoke native method
    final __result__ = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreManager::setAnalysisAction', {"var0": var0});
  
  
    // handle native call
    MethodChannel('cn.jiguang.api.JCoreManager::setAnalysisAction::Callback', kJcoreFluttifyMethodCodec)
        .setMethodCallHandler((methodCall) async {
          try {
            final args = methodCall.arguments as Map;
            switch (methodCall.method) {
              case 'Callback::cn.jiguang.api.JAnalyticsAction::dispatchResume':
                // print log
                if (fluttifyLogEnabled) {
                  debugPrint('fluttify-dart-callback: dispatchResume([\'var1\':${args['var1']}])');
                }
          
                // handle the native call
                await var0?.dispatchResume(JcoreFluttifyAndroidAs(args['var1']));
                break;
              case 'Callback::cn.jiguang.api.JAnalyticsAction::dispatchPause':
                // print log
                if (fluttifyLogEnabled) {
                  debugPrint('fluttify-dart-callback: dispatchPause([\'var1\':${args['var1']}])');
                }
          
                // handle the native call
                await var0?.dispatchPause(JcoreFluttifyAndroidAs(args['var1']));
                break;
              case 'Callback::cn.jiguang.api.JAnalyticsAction::dispatchStatus':
                // print log
                if (fluttifyLogEnabled) {
                  debugPrint('fluttify-dart-callback: dispatchStatus([\'var1\':${args['var1']}, \'var2\':${args['var2']}])');
                }
          
                // handle the native call
                await var0?.dispatchStatus(JcoreFluttifyAndroidAs(args['var1']), args['var2']);
                break;
              default:
                throw MissingPluginException('方法${methodCall.method}未实现');
                break;
            }
          } catch (e) {
            debugPrint(e);
            rethrow;
          }
        });
  
    return __result__;
  }
  
  
  static Future<void> requestPermission(android_content_Context var0) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: cn.jiguang.api.JCoreManager::requestPermission([])');
    }
  
    // invoke native method
    final __result__ = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreManager::requestPermission', {"var0": var0});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<void> initCrashHandler(android_content_Context var0) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: cn.jiguang.api.JCoreManager::initCrashHandler([])');
    }
  
    // invoke native method
    final __result__ = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreManager::initCrashHandler', {"var0": var0});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<void> stopCrashHandler(android_content_Context var0) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: cn.jiguang.api.JCoreManager::stopCrashHandler([])');
    }
  
    // invoke native method
    final __result__ = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreManager::stopCrashHandler', {"var0": var0});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<bool> isTestEnv() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: cn.jiguang.api.JCoreManager::isTestEnv([])');
    }
  
    // invoke native method
    final __result__ = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreManager::isTestEnv', );
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<void> setSDKConfigs(android_content_Context var0, android_os_Bundle var1) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: cn.jiguang.api.JCoreManager::setSDKConfigs([])');
    }
  
    // invoke native method
    final __result__ = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreManager::setSDKConfigs', {"var0": var0, "var1": var1});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<android_content_Context> getAppContext(android_content_Context var0) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: cn.jiguang.api.JCoreManager::getAppContext([])');
    }
  
    // invoke native method
    final __result__ = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreManager::getAppContext', {"var0": var0});
  
  
    // handle native call
  
  
    return JcoreFluttifyAndroidAs<android_content_Context>(__result__);
  }
  
  @deprecated
  static Future<bool> getConnectionState(android_content_Context var0) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: cn.jiguang.api.JCoreManager::getConnectionState([])');
    }
  
    // invoke native method
    final __result__ = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreManager::getConnectionState', {"var0": var0});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  //endregion

  @override
  String toString() {
    return 'cn_jiguang_api_JCoreManager{refId: $refId, runtimeType: $runtimeType, tag__: $tag__}';
  }
}

extension cn_jiguang_api_JCoreManager_Batch on List<cn_jiguang_api_JCoreManager> {
  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  static Future<List<void>> init_batch(List<android_content_Context> var0) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreManager::init_batch', [for (int __i__ = 0; __i__ < var0.length; __i__++) {"var0": var0[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  static Future<List<void>> register_batch(List<android_content_Context> var0, List<String> var1) async {
    assert(var0.length == var1.length);
  
    // invoke native method
    final resultBatch = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreManager::register_batch', [for (int __i__ = 0; __i__ < var0.length; __i__++) {"var0": var0[__i__], "var1": var1[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  static Future<List<void>> unRegister_batch(List<android_content_Context> var0) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreManager::unRegister_batch', [for (int __i__ = 0; __i__ < var0.length; __i__++) {"var0": var0[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  static Future<List<void>> changeLiveStatus_batch(List<bool> var0) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreManager::changeLiveStatus_batch', [for (int __i__ = 0; __i__ < var0.length; __i__++) {"var0": var0[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  static Future<List<void>> setLBSEnable_batch(List<android_content_Context> var0, List<bool> var1) async {
    assert(var0.length == var1.length);
  
    // invoke native method
    final resultBatch = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreManager::setLBSEnable_batch', [for (int __i__ = 0; __i__ < var0.length; __i__++) {"var0": var0[__i__], "var1": var1[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  static Future<List<void>> setDebugMode_batch(List<bool> var0) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreManager::setDebugMode_batch', [for (int __i__ = 0; __i__ < var0.length; __i__++) {"var0": var0[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  static Future<List<bool>> getDebugMode_batch() async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreManager::getDebugMode_batch', );
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<bool>().toList();
  }
  
  
  static Future<List<bool>> isInternal_batch() async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreManager::isInternal_batch', );
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<bool>().toList();
  }
  
  
  static Future<List<void>> addDispatchAction_batch(List<String> var0, List<String> var1) async {
    assert(var0.length == var1.length);
  
    // invoke native method
    final resultBatch = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreManager::addDispatchAction_batch', [for (int __i__ = 0; __i__ < var0.length; __i__++) {"var0": var0[__i__], "var1": var1[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  static Future<List<Object>> onEvent__android_content_Context__String__int__String__android_os_Bundle__Object_batch(List<android_content_Context> var0, List<String> var1, List<int> var2, List<String> var3, List<android_os_Bundle> var4, List<Object> var5) async {
    assert(var0.length == var1.length && var1.length == var2.length && var2.length == var3.length && var3.length == var4.length && var4.length == var5.length);
  
    // invoke native method
    final resultBatch = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreManager::onEvent__android_content_Context__String__int__String__android_os_Bundle__Object_batch', [for (int __i__ = 0; __i__ < var0.length; __i__++) {"var0": var0[__i__], "var1": var1[__i__], "var2": var2[__i__], "var3": var3[__i__], "var4": var4[__i__], "var5": var5[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<Object>().toList();
  }
  
  
  static Future<List<Object>> onEvent__android_content_Context__String__int__bool__String__android_os_Bundle__Object_batch(List<android_content_Context> var0, List<String> var1, List<int> var2, List<bool> var3, List<String> var4, List<android_os_Bundle> var5, List<Object> var6) async {
    assert(var0.length == var1.length && var1.length == var2.length && var2.length == var3.length && var3.length == var4.length && var4.length == var5.length && var5.length == var6.length);
  
    // invoke native method
    final resultBatch = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreManager::onEvent__android_content_Context__String__int__bool__String__android_os_Bundle__Object_batch', [for (int __i__ = 0; __i__ < var0.length; __i__++) {"var0": var0[__i__], "var1": var1[__i__], "var2": var2[__i__], "var3": var3[__i__], "var4": var4[__i__], "var5": var5[__i__], "var6": var6[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<Object>().toList();
  }
  
  
  static Future<List<void>> requestPermission_batch(List<android_content_Context> var0) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreManager::requestPermission_batch', [for (int __i__ = 0; __i__ < var0.length; __i__++) {"var0": var0[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  static Future<List<void>> initCrashHandler_batch(List<android_content_Context> var0) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreManager::initCrashHandler_batch', [for (int __i__ = 0; __i__ < var0.length; __i__++) {"var0": var0[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  static Future<List<void>> stopCrashHandler_batch(List<android_content_Context> var0) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreManager::stopCrashHandler_batch', [for (int __i__ = 0; __i__ < var0.length; __i__++) {"var0": var0[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  static Future<List<bool>> isTestEnv_batch() async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreManager::isTestEnv_batch', );
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<bool>().toList();
  }
  
  
  static Future<List<void>> setSDKConfigs_batch(List<android_content_Context> var0, List<android_os_Bundle> var1) async {
    assert(var0.length == var1.length);
  
    // invoke native method
    final resultBatch = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreManager::setSDKConfigs_batch', [for (int __i__ = 0; __i__ < var0.length; __i__++) {"var0": var0[__i__], "var1": var1[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  static Future<List<android_content_Context>> getAppContext_batch(List<android_content_Context> var0) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreManager::getAppContext_batch', [for (int __i__ = 0; __i__ < var0.length; __i__++) {"var0": var0[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => JcoreFluttifyAndroidAs<android_content_Context>(__result__)).cast<android_content_Context>().toList();
  }
  
  @deprecated
  static Future<List<bool>> getConnectionState_batch(List<android_content_Context> var0) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreManager::getConnectionState_batch', [for (int __i__ = 0; __i__ < var0.length; __i__++) {"var0": var0[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<bool>().toList();
  }
  
  //endregion
}