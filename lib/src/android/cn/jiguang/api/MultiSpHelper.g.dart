// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:jcore_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';

class cn_jiguang_api_MultiSpHelper extends java_lang_Object  {
  //region constants
  static const String name__ = 'cn.jiguang.api.MultiSpHelper';

  @override
  final String tag__ = 'jcore_fluttify';

  
  //endregion

  //region creators
  
  //endregion

  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  static Future<void> commitString(android_content_Context var0, String var1, String var2) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: cn.jiguang.api.MultiSpHelper::commitString([\'var1\':$var1, \'var2\':$var2])');
    }
  
    // invoke native method
    final __result__ = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.MultiSpHelper::commitString', {"var0": var0, "var1": var1, "var2": var2});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<String> getString(android_content_Context var0, String var1, String var2) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: cn.jiguang.api.MultiSpHelper::getString([\'var1\':$var1, \'var2\':$var2])');
    }
  
    // invoke native method
    final __result__ = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.MultiSpHelper::getString', {"var0": var0, "var1": var1, "var2": var2});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<void> commitLong(android_content_Context var0, String var1, int var2) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: cn.jiguang.api.MultiSpHelper::commitLong([\'var1\':$var1, \'var2\':$var2])');
    }
  
    // invoke native method
    final __result__ = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.MultiSpHelper::commitLong', {"var0": var0, "var1": var1, "var2": var2});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<int> getLong(android_content_Context var0, String var1, int var2) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: cn.jiguang.api.MultiSpHelper::getLong([\'var1\':$var1, \'var2\':$var2])');
    }
  
    // invoke native method
    final __result__ = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.MultiSpHelper::getLong', {"var0": var0, "var1": var1, "var2": var2});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<void> commitInt(android_content_Context var0, String var1, int var2) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: cn.jiguang.api.MultiSpHelper::commitInt([\'var1\':$var1, \'var2\':$var2])');
    }
  
    // invoke native method
    final __result__ = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.MultiSpHelper::commitInt', {"var0": var0, "var1": var1, "var2": var2});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<int> getInt(android_content_Context var0, String var1, int var2) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: cn.jiguang.api.MultiSpHelper::getInt([\'var1\':$var1, \'var2\':$var2])');
    }
  
    // invoke native method
    final __result__ = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.MultiSpHelper::getInt', {"var0": var0, "var1": var1, "var2": var2});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<void> commitBoolean(android_content_Context var0, String var1, bool var2) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: cn.jiguang.api.MultiSpHelper::commitBoolean([\'var1\':$var1, \'var2\':$var2])');
    }
  
    // invoke native method
    final __result__ = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.MultiSpHelper::commitBoolean', {"var0": var0, "var1": var1, "var2": var2});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<bool> getBoolean(android_content_Context var0, String var1, bool var2) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: cn.jiguang.api.MultiSpHelper::getBoolean([\'var1\':$var1, \'var2\':$var2])');
    }
  
    // invoke native method
    final __result__ = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.MultiSpHelper::getBoolean', {"var0": var0, "var1": var1, "var2": var2});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  //endregion

  @override
  String toString() {
    return 'cn_jiguang_api_MultiSpHelper{refId: $refId, runtimeType: $runtimeType, tag__: $tag__}';
  }
}

extension cn_jiguang_api_MultiSpHelper_Batch on List<cn_jiguang_api_MultiSpHelper> {
  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  static Future<List<void>> commitString_batch(List<android_content_Context> var0, List<String> var1, List<String> var2) async {
    assert(var0.length == var1.length && var1.length == var2.length);
  
    // invoke native method
    final resultBatch = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.MultiSpHelper::commitString_batch', [for (int __i__ = 0; __i__ < var0.length; __i__++) {"var0": var0[__i__], "var1": var1[__i__], "var2": var2[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  static Future<List<String>> getString_batch(List<android_content_Context> var0, List<String> var1, List<String> var2) async {
    assert(var0.length == var1.length && var1.length == var2.length);
  
    // invoke native method
    final resultBatch = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.MultiSpHelper::getString_batch', [for (int __i__ = 0; __i__ < var0.length; __i__++) {"var0": var0[__i__], "var1": var1[__i__], "var2": var2[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<String>().toList();
  }
  
  
  static Future<List<void>> commitLong_batch(List<android_content_Context> var0, List<String> var1, List<int> var2) async {
    assert(var0.length == var1.length && var1.length == var2.length);
  
    // invoke native method
    final resultBatch = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.MultiSpHelper::commitLong_batch', [for (int __i__ = 0; __i__ < var0.length; __i__++) {"var0": var0[__i__], "var1": var1[__i__], "var2": var2[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  static Future<List<int>> getLong_batch(List<android_content_Context> var0, List<String> var1, List<int> var2) async {
    assert(var0.length == var1.length && var1.length == var2.length);
  
    // invoke native method
    final resultBatch = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.MultiSpHelper::getLong_batch', [for (int __i__ = 0; __i__ < var0.length; __i__++) {"var0": var0[__i__], "var1": var1[__i__], "var2": var2[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<int>().toList();
  }
  
  
  static Future<List<void>> commitInt_batch(List<android_content_Context> var0, List<String> var1, List<int> var2) async {
    assert(var0.length == var1.length && var1.length == var2.length);
  
    // invoke native method
    final resultBatch = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.MultiSpHelper::commitInt_batch', [for (int __i__ = 0; __i__ < var0.length; __i__++) {"var0": var0[__i__], "var1": var1[__i__], "var2": var2[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  static Future<List<int>> getInt_batch(List<android_content_Context> var0, List<String> var1, List<int> var2) async {
    assert(var0.length == var1.length && var1.length == var2.length);
  
    // invoke native method
    final resultBatch = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.MultiSpHelper::getInt_batch', [for (int __i__ = 0; __i__ < var0.length; __i__++) {"var0": var0[__i__], "var1": var1[__i__], "var2": var2[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<int>().toList();
  }
  
  
  static Future<List<void>> commitBoolean_batch(List<android_content_Context> var0, List<String> var1, List<bool> var2) async {
    assert(var0.length == var1.length && var1.length == var2.length);
  
    // invoke native method
    final resultBatch = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.MultiSpHelper::commitBoolean_batch', [for (int __i__ = 0; __i__ < var0.length; __i__++) {"var0": var0[__i__], "var1": var1[__i__], "var2": var2[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  static Future<List<bool>> getBoolean_batch(List<android_content_Context> var0, List<String> var1, List<bool> var2) async {
    assert(var0.length == var1.length && var1.length == var2.length);
  
    // invoke native method
    final resultBatch = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.MultiSpHelper::getBoolean_batch', [for (int __i__ = 0; __i__ < var0.length; __i__++) {"var0": var0[__i__], "var1": var1[__i__], "var2": var2[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<bool>().toList();
  }
  
  //endregion
}