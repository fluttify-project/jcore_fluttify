// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:jcore_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';

class cn_jiguang_api_JCoreInterface extends java_lang_Object  {
  //region constants
  static const String name__ = 'cn.jiguang.api.JCoreInterface';

  @override
  final String tag__ = 'jcore_fluttify';

  
  //endregion

  //region creators
  static Future<cn_jiguang_api_JCoreInterface> create__() async {
    final __result__ = await kJcoreFluttifyChannel.invokeMethod(
      'ObjectFactory::createcn_jiguang_api_JCoreInterface__',
    
    );
    return JcoreFluttifyAndroidAs<cn_jiguang_api_JCoreInterface>(__result__);
  }
  
  static Future<List<cn_jiguang_api_JCoreInterface>> create_batch__(int length) async {
    assert(true);
    final __result_batch__ = await  kJcoreFluttifyChannel.invokeListMethod(
      'ObjectFactory::create_batchcn_jiguang_api_JCoreInterface__',
      {'length': length}
    );
    return __result_batch__
        .map((it) => JcoreFluttifyAndroidAs<cn_jiguang_api_JCoreInterface>(it))
        .toList();
  }
  
  //endregion

  //region getters
  static Future<String> get_static_DAEMON_ACTION() async {
    final __result__ = await kJcoreFluttifyChannel.invokeMethod("cn.jiguang.api.JCoreInterface::get_DAEMON_ACTION", );
    return __result__;
  }
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  static Future<bool> init(android_content_Context var0, bool var1) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: cn.jiguang.api.JCoreInterface::init([\'var1\':$var1])');
    }
  
    // invoke native method
    final __result__ = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreInterface::init', {"var0": var0, "var1": var1});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<void> register(android_content_Context var0) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: cn.jiguang.api.JCoreInterface::register([])');
    }
  
    // invoke native method
    final __result__ = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreInterface::register', {"var0": var0});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<void> sendData(android_content_Context var0, String var1, int var2, Uint8List var3) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: cn.jiguang.api.JCoreInterface::sendData([\'var1\':$var1, \'var2\':$var2, \'var3\':$var3])');
    }
  
    // invoke native method
    final __result__ = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreInterface::sendData', {"var0": var0, "var1": var1, "var2": var2, "var3": var3});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<void> sendRequestData(android_content_Context var0, String var1, int var2, Uint8List var3) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: cn.jiguang.api.JCoreInterface::sendRequestData([\'var1\':$var1, \'var2\':$var2, \'var3\':$var3])');
    }
  
    // invoke native method
    final __result__ = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreInterface::sendRequestData', {"var0": var0, "var1": var1, "var2": var2, "var3": var3});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<void> sendAction(android_content_Context var0, String var1, android_os_Bundle var2) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: cn.jiguang.api.JCoreInterface::sendAction([\'var1\':$var1])');
    }
  
    // invoke native method
    final __result__ = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreInterface::sendAction', {"var0": var0, "var1": var1, "var2": var2});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<void> stop(android_content_Context var0, String var1, android_os_Bundle var2) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: cn.jiguang.api.JCoreInterface::stop([\'var1\':$var1])');
    }
  
    // invoke native method
    final __result__ = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreInterface::stop', {"var0": var0, "var1": var1, "var2": var2});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<void> restart(android_content_Context var0, String var1, android_os_Bundle var2, bool var3) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: cn.jiguang.api.JCoreInterface::restart([\'var1\':$var1, \'var3\':$var3])');
    }
  
    // invoke native method
    final __result__ = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreInterface::restart', {"var0": var0, "var1": var1, "var2": var2, "var3": var3});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<String> getDeviceId(android_content_Context var0) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: cn.jiguang.api.JCoreInterface::getDeviceId([])');
    }
  
    // invoke native method
    final __result__ = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreInterface::getDeviceId', {"var0": var0});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<bool> canCallDirect() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: cn.jiguang.api.JCoreInterface::canCallDirect([])');
    }
  
    // invoke native method
    final __result__ = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreInterface::canCallDirect', );
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<void> setDebugMode(bool var0) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: cn.jiguang.api.JCoreInterface::setDebugMode([\'var0\':$var0])');
    }
  
    // invoke native method
    final __result__ = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreInterface::setDebugMode', {"var0": var0});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<bool> getDebugMode() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: cn.jiguang.api.JCoreInterface::getDebugMode([])');
    }
  
    // invoke native method
    final __result__ = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreInterface::getDebugMode', );
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<void> putSingleExecutor(String var0) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: cn.jiguang.api.JCoreInterface::putSingleExecutor([\'var0\':$var0])');
    }
  
    // invoke native method
    final __result__ = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreInterface::putSingleExecutor', {"var0": var0});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<void> setAnalysisAction(cn_jiguang_api_JAnalyticsAction var0) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: cn.jiguang.api.JCoreInterface::setAnalysisAction([])');
    }
  
    // invoke native method
    final __result__ = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreInterface::setAnalysisAction', {"var0": var0});
  
  
    // handle native call
    MethodChannel('cn.jiguang.api.JCoreInterface::setAnalysisAction::Callback', kJcoreFluttifyMethodCodec)
        .setMethodCallHandler((methodCall) async {
          try {
            final args = methodCall.arguments as Map;
            switch (methodCall.method) {
              case 'Callback::cn.jiguang.api.JAnalyticsAction::dispatchResume':
                // print log
                if (fluttifyLogEnabled) {
                  debugPrint('fluttify-dart-callback: dispatchResume([\'var1\':${args['var1']}])');
                }
          
                // handle the native call
                await var0?.dispatchResume(JcoreFluttifyAndroidAs(args['var1']));
                break;
              case 'Callback::cn.jiguang.api.JAnalyticsAction::dispatchPause':
                // print log
                if (fluttifyLogEnabled) {
                  debugPrint('fluttify-dart-callback: dispatchPause([\'var1\':${args['var1']}])');
                }
          
                // handle the native call
                await var0?.dispatchPause(JcoreFluttifyAndroidAs(args['var1']));
                break;
              case 'Callback::cn.jiguang.api.JAnalyticsAction::dispatchStatus':
                // print log
                if (fluttifyLogEnabled) {
                  debugPrint('fluttify-dart-callback: dispatchStatus([\'var1\':${args['var1']}, \'var2\':${args['var2']}])');
                }
          
                // handle the native call
                await var0?.dispatchStatus(JcoreFluttifyAndroidAs(args['var1']), args['var2']);
                break;
              default:
                throw MissingPluginException('方法${methodCall.method}未实现');
                break;
            }
          } catch (e) {
            debugPrint(e);
            rethrow;
          }
        });
  
    return __result__;
  }
  
  
  static Future<String> getRegistrationID(android_content_Context var0) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: cn.jiguang.api.JCoreInterface::getRegistrationID([])');
    }
  
    // invoke native method
    final __result__ = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreInterface::getRegistrationID', {"var0": var0});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<bool> isValidRegistered() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: cn.jiguang.api.JCoreInterface::isValidRegistered([])');
    }
  
    // invoke native method
    final __result__ = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreInterface::isValidRegistered', );
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<String> getAppKey() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: cn.jiguang.api.JCoreInterface::getAppKey([])');
    }
  
    // invoke native method
    final __result__ = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreInterface::getAppKey', );
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<int> getReportTime() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: cn.jiguang.api.JCoreInterface::getReportTime([])');
    }
  
    // invoke native method
    final __result__ = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreInterface::getReportTime', );
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<int> getUid() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: cn.jiguang.api.JCoreInterface::getUid([])');
    }
  
    // invoke native method
    final __result__ = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreInterface::getUid', );
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<int> getSid() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: cn.jiguang.api.JCoreInterface::getSid([])');
    }
  
    // invoke native method
    final __result__ = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreInterface::getSid', );
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<int> getNextRid() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: cn.jiguang.api.JCoreInterface::getNextRid([])');
    }
  
    // invoke native method
    final __result__ = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreInterface::getNextRid', );
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<bool> isTcpConnected() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: cn.jiguang.api.JCoreInterface::isTcpConnected([])');
    }
  
    // invoke native method
    final __result__ = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreInterface::isTcpConnected', );
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<bool> getConnectionState(android_content_Context var0) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: cn.jiguang.api.JCoreInterface::getConnectionState([])');
    }
  
    // invoke native method
    final __result__ = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreInterface::getConnectionState', {"var0": var0});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<String> getChannel() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: cn.jiguang.api.JCoreInterface::getChannel([])');
    }
  
    // invoke native method
    final __result__ = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreInterface::getChannel', );
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<bool> reportHttpData(android_content_Context var0, Object var1, String var2) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: cn.jiguang.api.JCoreInterface::reportHttpData([\'var1\':$var1, \'var2\':$var2])');
    }
  
    // invoke native method
    final __result__ = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreInterface::reportHttpData', {"var0": var0, "var1": var1, "var2": var2});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<String> getHttpConfig(android_content_Context var0, String var1) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: cn.jiguang.api.JCoreInterface::getHttpConfig([\'var1\':$var1])');
    }
  
    // invoke native method
    final __result__ = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreInterface::getHttpConfig', {"var0": var0, "var1": var1});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<bool> getRuningFlag() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: cn.jiguang.api.JCoreInterface::getRuningFlag([])');
    }
  
    // invoke native method
    final __result__ = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreInterface::getRuningFlag', );
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<void> setImLBSEnable(android_content_Context var0, bool var1) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: cn.jiguang.api.JCoreInterface::setImLBSEnable([\'var1\':$var1])');
    }
  
    // invoke native method
    final __result__ = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreInterface::setImLBSEnable', {"var0": var0, "var1": var1});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<void> setWakeEnable(android_content_Context var0, bool var1) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: cn.jiguang.api.JCoreInterface::setWakeEnable([\'var1\':$var1])');
    }
  
    // invoke native method
    final __result__ = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreInterface::setWakeEnable', {"var0": var0, "var1": var1});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<void> onResume(android_content_Context var0) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: cn.jiguang.api.JCoreInterface::onResume([])');
    }
  
    // invoke native method
    final __result__ = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreInterface::onResume', {"var0": var0});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<void> onPause(android_content_Context var0) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: cn.jiguang.api.JCoreInterface::onPause([])');
    }
  
    // invoke native method
    final __result__ = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreInterface::onPause', {"var0": var0});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<void> onFragmentResume(android_content_Context var0, String var1) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: cn.jiguang.api.JCoreInterface::onFragmentResume([\'var1\':$var1])');
    }
  
    // invoke native method
    final __result__ = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreInterface::onFragmentResume', {"var0": var0, "var1": var1});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<void> onFragmentPause(android_content_Context var0, String var1) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: cn.jiguang.api.JCoreInterface::onFragmentPause([\'var1\':$var1])');
    }
  
    // invoke native method
    final __result__ = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreInterface::onFragmentPause', {"var0": var0, "var1": var1});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<void> onKillProcess(android_content_Context var0) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: cn.jiguang.api.JCoreInterface::onKillProcess([])');
    }
  
    // invoke native method
    final __result__ = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreInterface::onKillProcess', {"var0": var0});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<void> initCrashHandler(android_content_Context var0) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: cn.jiguang.api.JCoreInterface::initCrashHandler([])');
    }
  
    // invoke native method
    final __result__ = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreInterface::initCrashHandler', {"var0": var0});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<void> stopCrashHandler(android_content_Context var0) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: cn.jiguang.api.JCoreInterface::stopCrashHandler([])');
    }
  
    // invoke native method
    final __result__ = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreInterface::stopCrashHandler', {"var0": var0});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<void> requestPermission(android_content_Context var0) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: cn.jiguang.api.JCoreInterface::requestPermission([])');
    }
  
    // invoke native method
    final __result__ = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreInterface::requestPermission', {"var0": var0});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<void> setCanLaunchedStoppedService(bool var0) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: cn.jiguang.api.JCoreInterface::setCanLaunchedStoppedService([\'var0\':$var0])');
    }
  
    // invoke native method
    final __result__ = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreInterface::setCanLaunchedStoppedService', {"var0": var0});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<void> setTestConn(bool var0) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: cn.jiguang.api.JCoreInterface::setTestConn([\'var0\':$var0])');
    }
  
    // invoke native method
    final __result__ = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreInterface::setTestConn', {"var0": var0});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<void> setTestConnIPPort(String var0, int var1) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: cn.jiguang.api.JCoreInterface::setTestConnIPPort([\'var0\':$var0, \'var1\':$var1])');
    }
  
    // invoke native method
    final __result__ = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreInterface::setTestConnIPPort', {"var0": var0, "var1": var1});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<int> getJCoreSDKVersionInt() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: cn.jiguang.api.JCoreInterface::getJCoreSDKVersionInt([])');
    }
  
    // invoke native method
    final __result__ = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreInterface::getJCoreSDKVersionInt', );
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<void> processCtrlReport(int var0) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: cn.jiguang.api.JCoreInterface::processCtrlReport([\'var0\':$var0])');
    }
  
    // invoke native method
    final __result__ = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreInterface::processCtrlReport', {"var0": var0});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<void> setDaemonAction(String var0) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: cn.jiguang.api.JCoreInterface::setDaemonAction([\'var0\':$var0])');
    }
  
    // invoke native method
    final __result__ = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreInterface::setDaemonAction', {"var0": var0});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<String> getDaemonAction() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: cn.jiguang.api.JCoreInterface::getDaemonAction([])');
    }
  
    // invoke native method
    final __result__ = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreInterface::getDaemonAction', );
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<void> setLocationReportDelay(android_content_Context var0, int var1) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: cn.jiguang.api.JCoreInterface::setLocationReportDelay([\'var1\':$var1])');
    }
  
    // invoke native method
    final __result__ = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreInterface::setLocationReportDelay', {"var0": var0, "var1": var1});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<void> setPowerSaveMode(android_content_Context var0, bool var1) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: cn.jiguang.api.JCoreInterface::setPowerSaveMode([\'var1\':$var1])');
    }
  
    // invoke native method
    final __result__ = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreInterface::setPowerSaveMode', {"var0": var0, "var1": var1});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<void> testCountryCode(String var0) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: cn.jiguang.api.JCoreInterface::testCountryCode([\'var0\':$var0])');
    }
  
    // invoke native method
    final __result__ = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreInterface::testCountryCode', {"var0": var0});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<void> setAccountId(String var0) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: cn.jiguang.api.JCoreInterface::setAccountId([\'var0\':$var0])');
    }
  
    // invoke native method
    final __result__ = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreInterface::setAccountId', {"var0": var0});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<String> getAccountId() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: cn.jiguang.api.JCoreInterface::getAccountId([])');
    }
  
    // invoke native method
    final __result__ = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreInterface::getAccountId', );
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<String> getCommonConfigAppkey() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: cn.jiguang.api.JCoreInterface::getCommonConfigAppkey([])');
    }
  
    // invoke native method
    final __result__ = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreInterface::getCommonConfigAppkey', );
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<void> triggerSceneCheck(android_content_Context var0, int var1) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: cn.jiguang.api.JCoreInterface::triggerSceneCheck([\'var1\':$var1])');
    }
  
    // invoke native method
    final __result__ = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreInterface::triggerSceneCheck', {"var0": var0, "var1": var1});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  //endregion

  @override
  String toString() {
    return 'cn_jiguang_api_JCoreInterface{refId: $refId, runtimeType: $runtimeType, tag__: $tag__}';
  }
}

extension cn_jiguang_api_JCoreInterface_Batch on List<cn_jiguang_api_JCoreInterface> {
  //region getters
  Future<List<String>> get_static_DAEMON_ACTION_batch() async {
    final resultBatch = await kJcoreFluttifyChannel.invokeMethod("cn.jiguang.api.JCoreInterface::get_DAEMON_ACTION_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List)?.map((__result__) => __result__)?.cast<String>()?.toList();
  }
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  static Future<List<bool>> init_batch(List<android_content_Context> var0, List<bool> var1) async {
    assert(var0.length == var1.length);
  
    // invoke native method
    final resultBatch = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreInterface::init_batch', [for (int __i__ = 0; __i__ < var0.length; __i__++) {"var0": var0[__i__], "var1": var1[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<bool>().toList();
  }
  
  
  static Future<List<void>> register_batch(List<android_content_Context> var0) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreInterface::register_batch', [for (int __i__ = 0; __i__ < var0.length; __i__++) {"var0": var0[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  static Future<List<void>> sendData_batch(List<android_content_Context> var0, List<String> var1, List<int> var2, List<Uint8List> var3) async {
    assert(var0.length == var1.length && var1.length == var2.length && var2.length == var3.length);
  
    // invoke native method
    final resultBatch = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreInterface::sendData_batch', [for (int __i__ = 0; __i__ < var0.length; __i__++) {"var0": var0[__i__], "var1": var1[__i__], "var2": var2[__i__], "var3": var3[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  static Future<List<void>> sendRequestData_batch(List<android_content_Context> var0, List<String> var1, List<int> var2, List<Uint8List> var3) async {
    assert(var0.length == var1.length && var1.length == var2.length && var2.length == var3.length);
  
    // invoke native method
    final resultBatch = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreInterface::sendRequestData_batch', [for (int __i__ = 0; __i__ < var0.length; __i__++) {"var0": var0[__i__], "var1": var1[__i__], "var2": var2[__i__], "var3": var3[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  static Future<List<void>> sendAction_batch(List<android_content_Context> var0, List<String> var1, List<android_os_Bundle> var2) async {
    assert(var0.length == var1.length && var1.length == var2.length);
  
    // invoke native method
    final resultBatch = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreInterface::sendAction_batch', [for (int __i__ = 0; __i__ < var0.length; __i__++) {"var0": var0[__i__], "var1": var1[__i__], "var2": var2[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  static Future<List<void>> stop_batch(List<android_content_Context> var0, List<String> var1, List<android_os_Bundle> var2) async {
    assert(var0.length == var1.length && var1.length == var2.length);
  
    // invoke native method
    final resultBatch = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreInterface::stop_batch', [for (int __i__ = 0; __i__ < var0.length; __i__++) {"var0": var0[__i__], "var1": var1[__i__], "var2": var2[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  static Future<List<void>> restart_batch(List<android_content_Context> var0, List<String> var1, List<android_os_Bundle> var2, List<bool> var3) async {
    assert(var0.length == var1.length && var1.length == var2.length && var2.length == var3.length);
  
    // invoke native method
    final resultBatch = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreInterface::restart_batch', [for (int __i__ = 0; __i__ < var0.length; __i__++) {"var0": var0[__i__], "var1": var1[__i__], "var2": var2[__i__], "var3": var3[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  static Future<List<String>> getDeviceId_batch(List<android_content_Context> var0) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreInterface::getDeviceId_batch', [for (int __i__ = 0; __i__ < var0.length; __i__++) {"var0": var0[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<String>().toList();
  }
  
  
  static Future<List<bool>> canCallDirect_batch() async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreInterface::canCallDirect_batch', );
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<bool>().toList();
  }
  
  
  static Future<List<void>> setDebugMode_batch(List<bool> var0) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreInterface::setDebugMode_batch', [for (int __i__ = 0; __i__ < var0.length; __i__++) {"var0": var0[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  static Future<List<bool>> getDebugMode_batch() async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreInterface::getDebugMode_batch', );
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<bool>().toList();
  }
  
  
  static Future<List<void>> putSingleExecutor_batch(List<String> var0) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreInterface::putSingleExecutor_batch', [for (int __i__ = 0; __i__ < var0.length; __i__++) {"var0": var0[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  static Future<List<String>> getRegistrationID_batch(List<android_content_Context> var0) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreInterface::getRegistrationID_batch', [for (int __i__ = 0; __i__ < var0.length; __i__++) {"var0": var0[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<String>().toList();
  }
  
  
  static Future<List<bool>> isValidRegistered_batch() async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreInterface::isValidRegistered_batch', );
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<bool>().toList();
  }
  
  
  static Future<List<String>> getAppKey_batch() async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreInterface::getAppKey_batch', );
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<String>().toList();
  }
  
  
  static Future<List<int>> getReportTime_batch() async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreInterface::getReportTime_batch', );
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<int>().toList();
  }
  
  
  static Future<List<int>> getUid_batch() async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreInterface::getUid_batch', );
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<int>().toList();
  }
  
  
  static Future<List<int>> getSid_batch() async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreInterface::getSid_batch', );
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<int>().toList();
  }
  
  
  static Future<List<int>> getNextRid_batch() async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreInterface::getNextRid_batch', );
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<int>().toList();
  }
  
  
  static Future<List<bool>> isTcpConnected_batch() async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreInterface::isTcpConnected_batch', );
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<bool>().toList();
  }
  
  
  static Future<List<bool>> getConnectionState_batch(List<android_content_Context> var0) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreInterface::getConnectionState_batch', [for (int __i__ = 0; __i__ < var0.length; __i__++) {"var0": var0[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<bool>().toList();
  }
  
  
  static Future<List<String>> getChannel_batch() async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreInterface::getChannel_batch', );
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<String>().toList();
  }
  
  
  static Future<List<bool>> reportHttpData_batch(List<android_content_Context> var0, List<Object> var1, List<String> var2) async {
    assert(var0.length == var1.length && var1.length == var2.length);
  
    // invoke native method
    final resultBatch = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreInterface::reportHttpData_batch', [for (int __i__ = 0; __i__ < var0.length; __i__++) {"var0": var0[__i__], "var1": var1[__i__], "var2": var2[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<bool>().toList();
  }
  
  
  static Future<List<String>> getHttpConfig_batch(List<android_content_Context> var0, List<String> var1) async {
    assert(var0.length == var1.length);
  
    // invoke native method
    final resultBatch = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreInterface::getHttpConfig_batch', [for (int __i__ = 0; __i__ < var0.length; __i__++) {"var0": var0[__i__], "var1": var1[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<String>().toList();
  }
  
  
  static Future<List<bool>> getRuningFlag_batch() async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreInterface::getRuningFlag_batch', );
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<bool>().toList();
  }
  
  
  static Future<List<void>> setImLBSEnable_batch(List<android_content_Context> var0, List<bool> var1) async {
    assert(var0.length == var1.length);
  
    // invoke native method
    final resultBatch = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreInterface::setImLBSEnable_batch', [for (int __i__ = 0; __i__ < var0.length; __i__++) {"var0": var0[__i__], "var1": var1[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  static Future<List<void>> setWakeEnable_batch(List<android_content_Context> var0, List<bool> var1) async {
    assert(var0.length == var1.length);
  
    // invoke native method
    final resultBatch = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreInterface::setWakeEnable_batch', [for (int __i__ = 0; __i__ < var0.length; __i__++) {"var0": var0[__i__], "var1": var1[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  static Future<List<void>> onResume_batch(List<android_content_Context> var0) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreInterface::onResume_batch', [for (int __i__ = 0; __i__ < var0.length; __i__++) {"var0": var0[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  static Future<List<void>> onPause_batch(List<android_content_Context> var0) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreInterface::onPause_batch', [for (int __i__ = 0; __i__ < var0.length; __i__++) {"var0": var0[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  static Future<List<void>> onFragmentResume_batch(List<android_content_Context> var0, List<String> var1) async {
    assert(var0.length == var1.length);
  
    // invoke native method
    final resultBatch = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreInterface::onFragmentResume_batch', [for (int __i__ = 0; __i__ < var0.length; __i__++) {"var0": var0[__i__], "var1": var1[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  static Future<List<void>> onFragmentPause_batch(List<android_content_Context> var0, List<String> var1) async {
    assert(var0.length == var1.length);
  
    // invoke native method
    final resultBatch = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreInterface::onFragmentPause_batch', [for (int __i__ = 0; __i__ < var0.length; __i__++) {"var0": var0[__i__], "var1": var1[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  static Future<List<void>> onKillProcess_batch(List<android_content_Context> var0) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreInterface::onKillProcess_batch', [for (int __i__ = 0; __i__ < var0.length; __i__++) {"var0": var0[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  static Future<List<void>> initCrashHandler_batch(List<android_content_Context> var0) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreInterface::initCrashHandler_batch', [for (int __i__ = 0; __i__ < var0.length; __i__++) {"var0": var0[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  static Future<List<void>> stopCrashHandler_batch(List<android_content_Context> var0) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreInterface::stopCrashHandler_batch', [for (int __i__ = 0; __i__ < var0.length; __i__++) {"var0": var0[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  static Future<List<void>> requestPermission_batch(List<android_content_Context> var0) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreInterface::requestPermission_batch', [for (int __i__ = 0; __i__ < var0.length; __i__++) {"var0": var0[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  static Future<List<void>> setCanLaunchedStoppedService_batch(List<bool> var0) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreInterface::setCanLaunchedStoppedService_batch', [for (int __i__ = 0; __i__ < var0.length; __i__++) {"var0": var0[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  static Future<List<void>> setTestConn_batch(List<bool> var0) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreInterface::setTestConn_batch', [for (int __i__ = 0; __i__ < var0.length; __i__++) {"var0": var0[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  static Future<List<void>> setTestConnIPPort_batch(List<String> var0, List<int> var1) async {
    assert(var0.length == var1.length);
  
    // invoke native method
    final resultBatch = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreInterface::setTestConnIPPort_batch', [for (int __i__ = 0; __i__ < var0.length; __i__++) {"var0": var0[__i__], "var1": var1[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  static Future<List<int>> getJCoreSDKVersionInt_batch() async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreInterface::getJCoreSDKVersionInt_batch', );
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<int>().toList();
  }
  
  
  static Future<List<void>> processCtrlReport_batch(List<int> var0) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreInterface::processCtrlReport_batch', [for (int __i__ = 0; __i__ < var0.length; __i__++) {"var0": var0[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  static Future<List<void>> setDaemonAction_batch(List<String> var0) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreInterface::setDaemonAction_batch', [for (int __i__ = 0; __i__ < var0.length; __i__++) {"var0": var0[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  static Future<List<String>> getDaemonAction_batch() async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreInterface::getDaemonAction_batch', );
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<String>().toList();
  }
  
  
  static Future<List<void>> setLocationReportDelay_batch(List<android_content_Context> var0, List<int> var1) async {
    assert(var0.length == var1.length);
  
    // invoke native method
    final resultBatch = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreInterface::setLocationReportDelay_batch', [for (int __i__ = 0; __i__ < var0.length; __i__++) {"var0": var0[__i__], "var1": var1[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  static Future<List<void>> setPowerSaveMode_batch(List<android_content_Context> var0, List<bool> var1) async {
    assert(var0.length == var1.length);
  
    // invoke native method
    final resultBatch = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreInterface::setPowerSaveMode_batch', [for (int __i__ = 0; __i__ < var0.length; __i__++) {"var0": var0[__i__], "var1": var1[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  static Future<List<void>> testCountryCode_batch(List<String> var0) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreInterface::testCountryCode_batch', [for (int __i__ = 0; __i__ < var0.length; __i__++) {"var0": var0[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  static Future<List<void>> setAccountId_batch(List<String> var0) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreInterface::setAccountId_batch', [for (int __i__ = 0; __i__ < var0.length; __i__++) {"var0": var0[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  static Future<List<String>> getAccountId_batch() async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreInterface::getAccountId_batch', );
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<String>().toList();
  }
  
  
  static Future<List<String>> getCommonConfigAppkey_batch() async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreInterface::getCommonConfigAppkey_batch', );
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<String>().toList();
  }
  
  
  static Future<List<void>> triggerSceneCheck_batch(List<android_content_Context> var0, List<int> var1) async {
    assert(var0.length == var1.length);
  
    // invoke native method
    final resultBatch = await kJcoreFluttifyChannel.invokeMethod('cn.jiguang.api.JCoreInterface::triggerSceneCheck_batch', [for (int __i__ = 0; __i__ < var0.length; __i__++) {"var0": var0[__i__], "var1": var1[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  //endregion
}