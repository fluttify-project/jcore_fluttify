// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:jcore_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';

class cn_jiguang_dy_Protocol extends java_lang_Object  {
  //region constants
  static const String name__ = 'cn.jiguang.dy.Protocol';

  static final String soName = "jcore232";
  //endregion

  //region creators
  static Future<cn_jiguang_dy_Protocol> create__() async {
    final refId = await MethodChannel('me.yohom/jcore_fluttify', StandardMethodCodec(FluttifyMessageCodec('jcore_fluttify'))).invokeMethod('ObjectFactory::createcn_jiguang_dy_Protocol__', );
    final object = cn_jiguang_dy_Protocol()..refId = refId..tag__ = 'jcore_fluttify';
    return object;
  }
  
  static Future<List<cn_jiguang_dy_Protocol>> create_batch__(int length) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
    final List resultBatch = await MethodChannel('me.yohom/jcore_fluttify', StandardMethodCodec(FluttifyMessageCodec('jcore_fluttify'))).invokeMethod('ObjectFactory::create_batchcn_jiguang_dy_Protocol__', {'length': length});
  
    final List<cn_jiguang_dy_Protocol> typedResult = resultBatch.map((result) => cn_jiguang_dy_Protocol()..refId = result..tag__ = 'jcore_fluttify').toList();
    return typedResult;
  }
  
  //endregion

  //region getters
  static Future<android_content_Context> get_static_mContext() async {
    final __result__ = await MethodChannel('me.yohom/jcore_fluttify', StandardMethodCodec(FluttifyMessageCodec('jcore_fluttify'))).invokeMethod("cn.jiguang.dy.Protocol::get_mContext", );
    return __result__ == null ? null : (android_content_Context()..refId = __result__..tag__ = 'jcore_fluttify');
  }
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  //endregion
}

extension cn_jiguang_dy_Protocol_Batch on List<cn_jiguang_dy_Protocol> {
  //region getters
  Future<List<android_content_Context>> get_static_mContext_batch() async {
    final resultBatch = await MethodChannel('me.yohom/jcore_fluttify', StandardMethodCodec(FluttifyMessageCodec('jcore_fluttify'))).invokeMethod("cn.jiguang.dy.Protocol::get_mContext_batch", [for (final __item__ in this) {'__this__': __item__}]);
  
    final typedResult = (resultBatch as List).cast<String>().map((__result__) => android_content_Context()..refId = __result__..tag__ = 'jcore_fluttify').toList();
    return typedResult;
  }
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  //endregion
}