//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

package me.yohom.jcore_fluttify.sub_handler;

import android.os.Bundle;
import android.util.Log;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import androidx.annotation.NonNull;
import io.flutter.embedding.engine.plugins.FlutterPlugin;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MethodCall;
import io.flutter.plugin.common.MethodChannel;
import io.flutter.plugin.common.PluginRegistry.Registrar;
import io.flutter.plugin.common.StandardMethodCodec;
import io.flutter.plugin.platform.PlatformViewRegistry;

import me.yohom.jcore_fluttify.JcoreFluttifyPlugin.Handler;
import me.yohom.foundation_fluttify.core.FluttifyMessageCodec;

import static me.yohom.foundation_fluttify.FoundationFluttifyPluginKt.getEnableLog;
import static me.yohom.foundation_fluttify.FoundationFluttifyPluginKt.getHEAP;

@SuppressWarnings("ALL")
public class SubHandler3 {
    public static Map<String, Handler> getSubHandler(BinaryMessenger messenger) {
        return new HashMap<String, Handler>() {{
            put("RefClass::isKindOfcn_jiguang_internal_ActionManager", (__args__, __methodResult__) -> {
                // 引用对象
                Object __this__ = ((Map<String, Object>) __args__).get("__this__");
            
                __methodResult__.success(__this__ instanceof cn.jiguang.internal.ActionManager);
            });
            put("RefClass::isKindOfcn_jiguang_android_BuildConfig", (__args__, __methodResult__) -> {
                // 引用对象
                Object __this__ = ((Map<String, Object>) __args__).get("__this__");
            
                __methodResult__.success(__this__ instanceof cn.jiguang.android.BuildConfig);
            });
            put("RefClass::isKindOfcn_jiguang_dy_Protocol", (__args__, __methodResult__) -> {
                // 引用对象
                Object __this__ = ((Map<String, Object>) __args__).get("__this__");
            
                __methodResult__.success(__this__ instanceof cn.jiguang.dy.Protocol);
            });
            put("RefClass::isKindOfcn_jiguang_api_JDispatchAction", (__args__, __methodResult__) -> {
                // 引用对象
                Object __this__ = ((Map<String, Object>) __args__).get("__this__");
            
                __methodResult__.success(__this__ instanceof cn.jiguang.api.JDispatchAction);
            });
            put("RefClass::isKindOfcn_jiguang_api_JActionExtra", (__args__, __methodResult__) -> {
                // 引用对象
                Object __this__ = ((Map<String, Object>) __args__).get("__this__");
            
                __methodResult__.success(__this__ instanceof cn.jiguang.api.JActionExtra);
            });
            put("RefClass::isKindOfcn_jiguang_api_utils_ByteBufferUtils", (__args__, __methodResult__) -> {
                // 引用对象
                Object __this__ = ((Map<String, Object>) __args__).get("__this__");
            
                __methodResult__.success(__this__ instanceof cn.jiguang.api.utils.ByteBufferUtils);
            });
            put("RefClass::isKindOfcn_jiguang_api_utils_OutputDataUtil", (__args__, __methodResult__) -> {
                // 引用对象
                Object __this__ = ((Map<String, Object>) __args__).get("__this__");
            
                __methodResult__.success(__this__ instanceof cn.jiguang.api.utils.OutputDataUtil);
            });
            put("RefClass::isKindOfcn_jiguang_api_utils_ProtocolUtil", (__args__, __methodResult__) -> {
                // 引用对象
                Object __this__ = ((Map<String, Object>) __args__).get("__this__");
            
                __methodResult__.success(__this__ instanceof cn.jiguang.api.utils.ProtocolUtil);
            });
            put("RefClass::isKindOfcn_jiguang_api_JRequest", (__args__, __methodResult__) -> {
                // 引用对象
                Object __this__ = ((Map<String, Object>) __args__).get("__this__");
            
                __methodResult__.success(__this__ instanceof cn.jiguang.api.JRequest);
            });
            put("RefClass::isKindOfcn_jiguang_api_JResponse", (__args__, __methodResult__) -> {
                // 引用对象
                Object __this__ = ((Map<String, Object>) __args__).get("__this__");
            
                __methodResult__.success(__this__ instanceof cn.jiguang.api.JResponse);
            });
            put("RefClass::isKindOfcn_jiguang_api_JCoreInterface", (__args__, __methodResult__) -> {
                // 引用对象
                Object __this__ = ((Map<String, Object>) __args__).get("__this__");
            
                __methodResult__.success(__this__ instanceof cn.jiguang.api.JCoreInterface);
            });
            put("RefClass::isKindOfcn_jiguang_api_JCoreManager", (__args__, __methodResult__) -> {
                // 引用对象
                Object __this__ = ((Map<String, Object>) __args__).get("__this__");
            
                __methodResult__.success(__this__ instanceof cn.jiguang.api.JCoreManager);
            });
            put("RefClass::isKindOfcn_jiguang_api_BaseLogger", (__args__, __methodResult__) -> {
                // 引用对象
                Object __this__ = ((Map<String, Object>) __args__).get("__this__");
            
                __methodResult__.success(__this__ instanceof cn.jiguang.api.BaseLogger);
            });
            put("RefClass::isKindOfcn_jiguang_api_JProtocol", (__args__, __methodResult__) -> {
                // 引用对象
                Object __this__ = ((Map<String, Object>) __args__).get("__this__");
            
                __methodResult__.success(__this__ instanceof cn.jiguang.api.JProtocol);
            });
            put("RefClass::isKindOfcn_jiguang_api_MultiSpHelper", (__args__, __methodResult__) -> {
                // 引用对象
                Object __this__ = ((Map<String, Object>) __args__).get("__this__");
            
                __methodResult__.success(__this__ instanceof cn.jiguang.api.MultiSpHelper);
            });
            put("RefClass::isKindOfcn_jiguang_analytics_page_ActivityLifecycle", (__args__, __methodResult__) -> {
                // 引用对象
                Object __this__ = ((Map<String, Object>) __args__).get("__this__");
            
                __methodResult__.success(__this__ instanceof cn.jiguang.analytics.page.ActivityLifecycle);
            });
            put("RefClass::isKindOfcn_jiguang_analytics_page_PushSA", (__args__, __methodResult__) -> {
                // 引用对象
                Object __this__ = ((Map<String, Object>) __args__).get("__this__");
            
                __methodResult__.success(__this__ instanceof cn.jiguang.analytics.page.PushSA);
            });
            put("RefClass::isKindOfcn_jcore_client_android_BuildConfig", (__args__, __methodResult__) -> {
                // 引用对象
                Object __this__ = ((Map<String, Object>) __args__).get("__this__");
            
                __methodResult__.success(__this__ instanceof cn.jcore.client.android.BuildConfig);
            });
            put("RefClass::isKindOfcn_jpush_android_service_PushService", (__args__, __methodResult__) -> {
                // 引用对象
                Object __this__ = ((Map<String, Object>) __args__).get("__this__");
            
                __methodResult__.success(__this__ instanceof cn.jpush.android.service.PushService);
            });
            put("RefClass::isKindOfcn_jpush_android_service_DActivity", (__args__, __methodResult__) -> {
                // 引用对象
                Object __this__ = ((Map<String, Object>) __args__).get("__this__");
            
                __methodResult__.success(__this__ instanceof cn.jpush.android.service.DActivity);
            });
            put("RefClass::isKindOfcn_jpush_android_service_JCommonService", (__args__, __methodResult__) -> {
                // 引用对象
                Object __this__ = ((Map<String, Object>) __args__).get("__this__");
            
                __methodResult__.success(__this__ instanceof cn.jpush.android.service.JCommonService);
            });
            put("RefClass::isKindOfcn_jpush_android_service_DataProvider", (__args__, __methodResult__) -> {
                // 引用对象
                Object __this__ = ((Map<String, Object>) __args__).get("__this__");
            
                __methodResult__.success(__this__ instanceof cn.jpush.android.service.DataProvider);
            });
            put("RefClass::isKindOfcn_jpush_android_service_AlarmReceiver", (__args__, __methodResult__) -> {
                // 引用对象
                Object __this__ = ((Map<String, Object>) __args__).get("__this__");
            
                __methodResult__.success(__this__ instanceof cn.jpush.android.service.AlarmReceiver);
            });
            put("RefClass::isKindOfcn_jpush_android_service_PushReceiver", (__args__, __methodResult__) -> {
                // 引用对象
                Object __this__ = ((Map<String, Object>) __args__).get("__this__");
            
                __methodResult__.success(__this__ instanceof cn.jpush.android.service.PushReceiver);
            });
            put("RefClass::isKindOfcn_jpush_android_service_WakedResultReceiver", (__args__, __methodResult__) -> {
                // 引用对象
                Object __this__ = ((Map<String, Object>) __args__).get("__this__");
            
                __methodResult__.success(__this__ instanceof cn.jpush.android.service.WakedResultReceiver);
            });
            put("RefClass::isKindOfcn_jpush_android_service_DownloadActivity", (__args__, __methodResult__) -> {
                // 引用对象
                Object __this__ = ((Map<String, Object>) __args__).get("__this__");
            
                __methodResult__.success(__this__ instanceof cn.jpush.android.service.DownloadActivity);
            });
            put("RefClass::isKindOfcn_jpush_android_service_DaemonService", (__args__, __methodResult__) -> {
                // 引用对象
                Object __this__ = ((Map<String, Object>) __args__).get("__this__");
            
                __methodResult__.success(__this__ instanceof cn.jpush.android.service.DaemonService);
            });
            put("RefClass::isKindOfcn_jpush_android_service_DownloadProvider", (__args__, __methodResult__) -> {
                // 引用对象
                Object __this__ = ((Map<String, Object>) __args__).get("__this__");
            
                __methodResult__.success(__this__ instanceof cn.jpush.android.service.DownloadProvider);
            });
            // factory
            put("ObjectFactory::createcn_jiguang_net_HttpRequest__String", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: cn_jiguang_net_HttpRequest__String");
                }
            
                // args
                // ref arg
                String var1 = (String) ((Map<String, Object>) __args__).get("var1");
            
                // create target object
                cn.jiguang.net.HttpRequest __obj__ = new cn.jiguang.net.HttpRequest(var1);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcn_jiguang_net_HttpRequest__String__java_util_Map_String_String_", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: cn_jiguang_net_HttpRequest__String__java_util_Map_String_String_");
                }
            
                // args
                // ref arg
                String var1 = (String) ((Map<String, Object>) __args__).get("var1");
                // ref arg
                java.util.Map<String,String> var2 = (java.util.Map<String,String>) ((Map<String, Object>) __args__).get("var2");
            
                // create target object
                cn.jiguang.net.HttpRequest __obj__ = new cn.jiguang.net.HttpRequest(var1, var2);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcn_jiguang_net_HttpUtils__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: cn_jiguang_net_HttpUtils__");
                }
            
                // args
            
            
                // create target object
                cn.jiguang.net.HttpUtils __obj__ = new cn.jiguang.net.HttpUtils();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcn_jiguang_net_HttpResponse__String", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: cn_jiguang_net_HttpResponse__String");
                }
            
                // args
                // ref arg
                String var1 = (String) ((Map<String, Object>) __args__).get("var1");
            
                // create target object
                cn.jiguang.net.HttpResponse __obj__ = new cn.jiguang.net.HttpResponse(var1);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcn_jiguang_net_HttpResponse__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: cn_jiguang_net_HttpResponse__");
                }
            
                // args
            
            
                // create target object
                cn.jiguang.net.HttpResponse __obj__ = new cn.jiguang.net.HttpResponse();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcn_jiguang_internal_JConstants__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: cn_jiguang_internal_JConstants__");
                }
            
                // args
            
            
                // create target object
                cn.jiguang.internal.JConstants __obj__ = new cn.jiguang.internal.JConstants();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcn_jiguang_internal_ActionManager__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: cn_jiguang_internal_ActionManager__");
                }
            
                // args
            
            
                // create target object
                cn.jiguang.internal.ActionManager __obj__ = new cn.jiguang.internal.ActionManager();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcn_jiguang_android_BuildConfig__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: cn_jiguang_android_BuildConfig__");
                }
            
                // args
            
            
                // create target object
                cn.jiguang.android.BuildConfig __obj__ = new cn.jiguang.android.BuildConfig();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcn_jiguang_dy_Protocol__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: cn_jiguang_dy_Protocol__");
                }
            
                // args
            
            
                // create target object
                cn.jiguang.dy.Protocol __obj__ = new cn.jiguang.dy.Protocol();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcn_jiguang_api_utils_ByteBufferUtils__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: cn_jiguang_api_utils_ByteBufferUtils__");
                }
            
                // args
            
            
                // create target object
                cn.jiguang.api.utils.ByteBufferUtils __obj__ = new cn.jiguang.api.utils.ByteBufferUtils();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcn_jiguang_api_utils_OutputDataUtil__int", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: cn_jiguang_api_utils_OutputDataUtil__int");
                }
            
                // args
                // ref arg
                Number var1 = (Number) ((Map<String, Object>) __args__).get("var1");
            
                // create target object
                cn.jiguang.api.utils.OutputDataUtil __obj__ = new cn.jiguang.api.utils.OutputDataUtil(var1.intValue());
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcn_jiguang_api_utils_OutputDataUtil__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: cn_jiguang_api_utils_OutputDataUtil__");
                }
            
                // args
            
            
                // create target object
                cn.jiguang.api.utils.OutputDataUtil __obj__ = new cn.jiguang.api.utils.OutputDataUtil();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcn_jiguang_api_utils_ProtocolUtil__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: cn_jiguang_api_utils_ProtocolUtil__");
                }
            
                // args
            
            
                // create target object
                cn.jiguang.api.utils.ProtocolUtil __obj__ = new cn.jiguang.api.utils.ProtocolUtil();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcn_jiguang_api_JCoreInterface__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: cn_jiguang_api_JCoreInterface__");
                }
            
                // args
            
            
                // create target object
                cn.jiguang.api.JCoreInterface __obj__ = new cn.jiguang.api.JCoreInterface();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcn_jiguang_api_JCoreManager__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: cn_jiguang_api_JCoreManager__");
                }
            
                // args
            
            
                // create target object
                cn.jiguang.api.JCoreManager __obj__ = new cn.jiguang.api.JCoreManager();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcn_jcore_client_android_BuildConfig__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: cn_jcore_client_android_BuildConfig__");
                }
            
                // args
            
            
                // create target object
                cn.jcore.client.android.BuildConfig __obj__ = new cn.jcore.client.android.BuildConfig();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcn_jpush_android_service_DActivity__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: cn_jpush_android_service_DActivity__");
                }
            
                // args
            
            
                // create target object
                cn.jpush.android.service.DActivity __obj__ = new cn.jpush.android.service.DActivity();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcn_jpush_android_service_DataProvider__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: cn_jpush_android_service_DataProvider__");
                }
            
                // args
            
            
                // create target object
                cn.jpush.android.service.DataProvider __obj__ = new cn.jpush.android.service.DataProvider();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcn_jpush_android_service_DownloadActivity__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: cn_jpush_android_service_DownloadActivity__");
                }
            
                // args
            
            
                // create target object
                cn.jpush.android.service.DownloadActivity __obj__ = new cn.jpush.android.service.DownloadActivity();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::createcn_jpush_android_service_DownloadProvider__", (__args__, __methodResult__) -> {
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "创建对象: cn_jpush_android_service_DownloadProvider__");
                }
            
                // args
            
            
                // create target object
                cn.jpush.android.service.DownloadProvider __obj__ = new cn.jpush.android.service.DownloadProvider();
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                __methodResult__.success(__obj__);
            });
            // factory
            put("ObjectFactory::create_batchcn_jiguang_net_HttpRequest__String", (__argsBatch__, __methodResult__) -> {
                List<cn.jiguang.net.HttpRequest> __resultList__ = new ArrayList<>();
            
                int __length__ = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (__argsBatch__ instanceof Map) {
                    __length__ = (Integer) ((Map<String, Object>) __argsBatch__).get("length");
                }
                // or directly put the arg batch
                else if (__argsBatch__ instanceof List) {
                    __length__ = ((List<Map<String, Object>>) __argsBatch__).size();
                }
            
                for (int __i__ = 0; __i__ < __length__; __i__++) {
                    Map<String, Object> __args__ = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (__argsBatch__ instanceof List) {
                        __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
                    }
            
                    // args
                    // ref arg
                    String var1 = (String) ((Map<String, Object>) __args__).get("var1");
            
                    // create target object
                    cn.jiguang.net.HttpRequest __obj__ = new cn.jiguang.net.HttpRequest(var1);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    __resultList__.add(__obj__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // factory
            put("ObjectFactory::create_batchcn_jiguang_net_HttpRequest__String__java_util_Map_String_String_", (__argsBatch__, __methodResult__) -> {
                List<cn.jiguang.net.HttpRequest> __resultList__ = new ArrayList<>();
            
                int __length__ = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (__argsBatch__ instanceof Map) {
                    __length__ = (Integer) ((Map<String, Object>) __argsBatch__).get("length");
                }
                // or directly put the arg batch
                else if (__argsBatch__ instanceof List) {
                    __length__ = ((List<Map<String, Object>>) __argsBatch__).size();
                }
            
                for (int __i__ = 0; __i__ < __length__; __i__++) {
                    Map<String, Object> __args__ = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (__argsBatch__ instanceof List) {
                        __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
                    }
            
                    // args
                    // ref arg
                    String var1 = (String) ((Map<String, Object>) __args__).get("var1");
                    // ref arg
                    java.util.Map<String,String> var2 = (java.util.Map<String,String>) ((Map<String, Object>) __args__).get("var2");
            
                    // create target object
                    cn.jiguang.net.HttpRequest __obj__ = new cn.jiguang.net.HttpRequest(var1, var2);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    __resultList__.add(__obj__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // factory
            put("ObjectFactory::create_batchcn_jiguang_net_HttpUtils__", (__argsBatch__, __methodResult__) -> {
                List<cn.jiguang.net.HttpUtils> __resultList__ = new ArrayList<>();
            
                int __length__ = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (__argsBatch__ instanceof Map) {
                    __length__ = (Integer) ((Map<String, Object>) __argsBatch__).get("length");
                }
                // or directly put the arg batch
                else if (__argsBatch__ instanceof List) {
                    __length__ = ((List<Map<String, Object>>) __argsBatch__).size();
                }
            
                for (int __i__ = 0; __i__ < __length__; __i__++) {
                    Map<String, Object> __args__ = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (__argsBatch__ instanceof List) {
                        __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    cn.jiguang.net.HttpUtils __obj__ = new cn.jiguang.net.HttpUtils();
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    __resultList__.add(__obj__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // factory
            put("ObjectFactory::create_batchcn_jiguang_net_HttpResponse__String", (__argsBatch__, __methodResult__) -> {
                List<cn.jiguang.net.HttpResponse> __resultList__ = new ArrayList<>();
            
                int __length__ = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (__argsBatch__ instanceof Map) {
                    __length__ = (Integer) ((Map<String, Object>) __argsBatch__).get("length");
                }
                // or directly put the arg batch
                else if (__argsBatch__ instanceof List) {
                    __length__ = ((List<Map<String, Object>>) __argsBatch__).size();
                }
            
                for (int __i__ = 0; __i__ < __length__; __i__++) {
                    Map<String, Object> __args__ = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (__argsBatch__ instanceof List) {
                        __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
                    }
            
                    // args
                    // ref arg
                    String var1 = (String) ((Map<String, Object>) __args__).get("var1");
            
                    // create target object
                    cn.jiguang.net.HttpResponse __obj__ = new cn.jiguang.net.HttpResponse(var1);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    __resultList__.add(__obj__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // factory
            put("ObjectFactory::create_batchcn_jiguang_net_HttpResponse__", (__argsBatch__, __methodResult__) -> {
                List<cn.jiguang.net.HttpResponse> __resultList__ = new ArrayList<>();
            
                int __length__ = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (__argsBatch__ instanceof Map) {
                    __length__ = (Integer) ((Map<String, Object>) __argsBatch__).get("length");
                }
                // or directly put the arg batch
                else if (__argsBatch__ instanceof List) {
                    __length__ = ((List<Map<String, Object>>) __argsBatch__).size();
                }
            
                for (int __i__ = 0; __i__ < __length__; __i__++) {
                    Map<String, Object> __args__ = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (__argsBatch__ instanceof List) {
                        __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    cn.jiguang.net.HttpResponse __obj__ = new cn.jiguang.net.HttpResponse();
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    __resultList__.add(__obj__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // factory
            put("ObjectFactory::create_batchcn_jiguang_internal_JConstants__", (__argsBatch__, __methodResult__) -> {
                List<cn.jiguang.internal.JConstants> __resultList__ = new ArrayList<>();
            
                int __length__ = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (__argsBatch__ instanceof Map) {
                    __length__ = (Integer) ((Map<String, Object>) __argsBatch__).get("length");
                }
                // or directly put the arg batch
                else if (__argsBatch__ instanceof List) {
                    __length__ = ((List<Map<String, Object>>) __argsBatch__).size();
                }
            
                for (int __i__ = 0; __i__ < __length__; __i__++) {
                    Map<String, Object> __args__ = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (__argsBatch__ instanceof List) {
                        __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    cn.jiguang.internal.JConstants __obj__ = new cn.jiguang.internal.JConstants();
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    __resultList__.add(__obj__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // factory
            put("ObjectFactory::create_batchcn_jiguang_internal_ActionManager__", (__argsBatch__, __methodResult__) -> {
                List<cn.jiguang.internal.ActionManager> __resultList__ = new ArrayList<>();
            
                int __length__ = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (__argsBatch__ instanceof Map) {
                    __length__ = (Integer) ((Map<String, Object>) __argsBatch__).get("length");
                }
                // or directly put the arg batch
                else if (__argsBatch__ instanceof List) {
                    __length__ = ((List<Map<String, Object>>) __argsBatch__).size();
                }
            
                for (int __i__ = 0; __i__ < __length__; __i__++) {
                    Map<String, Object> __args__ = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (__argsBatch__ instanceof List) {
                        __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    cn.jiguang.internal.ActionManager __obj__ = new cn.jiguang.internal.ActionManager();
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    __resultList__.add(__obj__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // factory
            put("ObjectFactory::create_batchcn_jiguang_android_BuildConfig__", (__argsBatch__, __methodResult__) -> {
                List<cn.jiguang.android.BuildConfig> __resultList__ = new ArrayList<>();
            
                int __length__ = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (__argsBatch__ instanceof Map) {
                    __length__ = (Integer) ((Map<String, Object>) __argsBatch__).get("length");
                }
                // or directly put the arg batch
                else if (__argsBatch__ instanceof List) {
                    __length__ = ((List<Map<String, Object>>) __argsBatch__).size();
                }
            
                for (int __i__ = 0; __i__ < __length__; __i__++) {
                    Map<String, Object> __args__ = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (__argsBatch__ instanceof List) {
                        __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    cn.jiguang.android.BuildConfig __obj__ = new cn.jiguang.android.BuildConfig();
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    __resultList__.add(__obj__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // factory
            put("ObjectFactory::create_batchcn_jiguang_dy_Protocol__", (__argsBatch__, __methodResult__) -> {
                List<cn.jiguang.dy.Protocol> __resultList__ = new ArrayList<>();
            
                int __length__ = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (__argsBatch__ instanceof Map) {
                    __length__ = (Integer) ((Map<String, Object>) __argsBatch__).get("length");
                }
                // or directly put the arg batch
                else if (__argsBatch__ instanceof List) {
                    __length__ = ((List<Map<String, Object>>) __argsBatch__).size();
                }
            
                for (int __i__ = 0; __i__ < __length__; __i__++) {
                    Map<String, Object> __args__ = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (__argsBatch__ instanceof List) {
                        __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    cn.jiguang.dy.Protocol __obj__ = new cn.jiguang.dy.Protocol();
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    __resultList__.add(__obj__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // factory
            put("ObjectFactory::create_batchcn_jiguang_api_utils_ByteBufferUtils__", (__argsBatch__, __methodResult__) -> {
                List<cn.jiguang.api.utils.ByteBufferUtils> __resultList__ = new ArrayList<>();
            
                int __length__ = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (__argsBatch__ instanceof Map) {
                    __length__ = (Integer) ((Map<String, Object>) __argsBatch__).get("length");
                }
                // or directly put the arg batch
                else if (__argsBatch__ instanceof List) {
                    __length__ = ((List<Map<String, Object>>) __argsBatch__).size();
                }
            
                for (int __i__ = 0; __i__ < __length__; __i__++) {
                    Map<String, Object> __args__ = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (__argsBatch__ instanceof List) {
                        __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    cn.jiguang.api.utils.ByteBufferUtils __obj__ = new cn.jiguang.api.utils.ByteBufferUtils();
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    __resultList__.add(__obj__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // factory
            put("ObjectFactory::create_batchcn_jiguang_api_utils_OutputDataUtil__int", (__argsBatch__, __methodResult__) -> {
                List<cn.jiguang.api.utils.OutputDataUtil> __resultList__ = new ArrayList<>();
            
                int __length__ = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (__argsBatch__ instanceof Map) {
                    __length__ = (Integer) ((Map<String, Object>) __argsBatch__).get("length");
                }
                // or directly put the arg batch
                else if (__argsBatch__ instanceof List) {
                    __length__ = ((List<Map<String, Object>>) __argsBatch__).size();
                }
            
                for (int __i__ = 0; __i__ < __length__; __i__++) {
                    Map<String, Object> __args__ = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (__argsBatch__ instanceof List) {
                        __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
                    }
            
                    // args
                    // ref arg
                    Number var1 = (Number) ((Map<String, Object>) __args__).get("var1");
            
                    // create target object
                    cn.jiguang.api.utils.OutputDataUtil __obj__ = new cn.jiguang.api.utils.OutputDataUtil(var1.intValue());
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    __resultList__.add(__obj__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // factory
            put("ObjectFactory::create_batchcn_jiguang_api_utils_OutputDataUtil__", (__argsBatch__, __methodResult__) -> {
                List<cn.jiguang.api.utils.OutputDataUtil> __resultList__ = new ArrayList<>();
            
                int __length__ = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (__argsBatch__ instanceof Map) {
                    __length__ = (Integer) ((Map<String, Object>) __argsBatch__).get("length");
                }
                // or directly put the arg batch
                else if (__argsBatch__ instanceof List) {
                    __length__ = ((List<Map<String, Object>>) __argsBatch__).size();
                }
            
                for (int __i__ = 0; __i__ < __length__; __i__++) {
                    Map<String, Object> __args__ = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (__argsBatch__ instanceof List) {
                        __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    cn.jiguang.api.utils.OutputDataUtil __obj__ = new cn.jiguang.api.utils.OutputDataUtil();
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    __resultList__.add(__obj__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // factory
            put("ObjectFactory::create_batchcn_jiguang_api_utils_ProtocolUtil__", (__argsBatch__, __methodResult__) -> {
                List<cn.jiguang.api.utils.ProtocolUtil> __resultList__ = new ArrayList<>();
            
                int __length__ = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (__argsBatch__ instanceof Map) {
                    __length__ = (Integer) ((Map<String, Object>) __argsBatch__).get("length");
                }
                // or directly put the arg batch
                else if (__argsBatch__ instanceof List) {
                    __length__ = ((List<Map<String, Object>>) __argsBatch__).size();
                }
            
                for (int __i__ = 0; __i__ < __length__; __i__++) {
                    Map<String, Object> __args__ = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (__argsBatch__ instanceof List) {
                        __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    cn.jiguang.api.utils.ProtocolUtil __obj__ = new cn.jiguang.api.utils.ProtocolUtil();
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    __resultList__.add(__obj__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // factory
            put("ObjectFactory::create_batchcn_jiguang_api_JCoreInterface__", (__argsBatch__, __methodResult__) -> {
                List<cn.jiguang.api.JCoreInterface> __resultList__ = new ArrayList<>();
            
                int __length__ = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (__argsBatch__ instanceof Map) {
                    __length__ = (Integer) ((Map<String, Object>) __argsBatch__).get("length");
                }
                // or directly put the arg batch
                else if (__argsBatch__ instanceof List) {
                    __length__ = ((List<Map<String, Object>>) __argsBatch__).size();
                }
            
                for (int __i__ = 0; __i__ < __length__; __i__++) {
                    Map<String, Object> __args__ = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (__argsBatch__ instanceof List) {
                        __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    cn.jiguang.api.JCoreInterface __obj__ = new cn.jiguang.api.JCoreInterface();
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    __resultList__.add(__obj__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // factory
            put("ObjectFactory::create_batchcn_jiguang_api_JCoreManager__", (__argsBatch__, __methodResult__) -> {
                List<cn.jiguang.api.JCoreManager> __resultList__ = new ArrayList<>();
            
                int __length__ = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (__argsBatch__ instanceof Map) {
                    __length__ = (Integer) ((Map<String, Object>) __argsBatch__).get("length");
                }
                // or directly put the arg batch
                else if (__argsBatch__ instanceof List) {
                    __length__ = ((List<Map<String, Object>>) __argsBatch__).size();
                }
            
                for (int __i__ = 0; __i__ < __length__; __i__++) {
                    Map<String, Object> __args__ = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (__argsBatch__ instanceof List) {
                        __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    cn.jiguang.api.JCoreManager __obj__ = new cn.jiguang.api.JCoreManager();
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    __resultList__.add(__obj__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // factory
            put("ObjectFactory::create_batchcn_jcore_client_android_BuildConfig__", (__argsBatch__, __methodResult__) -> {
                List<cn.jcore.client.android.BuildConfig> __resultList__ = new ArrayList<>();
            
                int __length__ = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (__argsBatch__ instanceof Map) {
                    __length__ = (Integer) ((Map<String, Object>) __argsBatch__).get("length");
                }
                // or directly put the arg batch
                else if (__argsBatch__ instanceof List) {
                    __length__ = ((List<Map<String, Object>>) __argsBatch__).size();
                }
            
                for (int __i__ = 0; __i__ < __length__; __i__++) {
                    Map<String, Object> __args__ = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (__argsBatch__ instanceof List) {
                        __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    cn.jcore.client.android.BuildConfig __obj__ = new cn.jcore.client.android.BuildConfig();
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    __resultList__.add(__obj__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // factory
            put("ObjectFactory::create_batchcn_jpush_android_service_DActivity__", (__argsBatch__, __methodResult__) -> {
                List<cn.jpush.android.service.DActivity> __resultList__ = new ArrayList<>();
            
                int __length__ = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (__argsBatch__ instanceof Map) {
                    __length__ = (Integer) ((Map<String, Object>) __argsBatch__).get("length");
                }
                // or directly put the arg batch
                else if (__argsBatch__ instanceof List) {
                    __length__ = ((List<Map<String, Object>>) __argsBatch__).size();
                }
            
                for (int __i__ = 0; __i__ < __length__; __i__++) {
                    Map<String, Object> __args__ = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (__argsBatch__ instanceof List) {
                        __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    cn.jpush.android.service.DActivity __obj__ = new cn.jpush.android.service.DActivity();
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    __resultList__.add(__obj__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // factory
            put("ObjectFactory::create_batchcn_jpush_android_service_DataProvider__", (__argsBatch__, __methodResult__) -> {
                List<cn.jpush.android.service.DataProvider> __resultList__ = new ArrayList<>();
            
                int __length__ = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (__argsBatch__ instanceof Map) {
                    __length__ = (Integer) ((Map<String, Object>) __argsBatch__).get("length");
                }
                // or directly put the arg batch
                else if (__argsBatch__ instanceof List) {
                    __length__ = ((List<Map<String, Object>>) __argsBatch__).size();
                }
            
                for (int __i__ = 0; __i__ < __length__; __i__++) {
                    Map<String, Object> __args__ = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (__argsBatch__ instanceof List) {
                        __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    cn.jpush.android.service.DataProvider __obj__ = new cn.jpush.android.service.DataProvider();
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    __resultList__.add(__obj__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // factory
            put("ObjectFactory::create_batchcn_jpush_android_service_DownloadActivity__", (__argsBatch__, __methodResult__) -> {
                List<cn.jpush.android.service.DownloadActivity> __resultList__ = new ArrayList<>();
            
                int __length__ = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (__argsBatch__ instanceof Map) {
                    __length__ = (Integer) ((Map<String, Object>) __argsBatch__).get("length");
                }
                // or directly put the arg batch
                else if (__argsBatch__ instanceof List) {
                    __length__ = ((List<Map<String, Object>>) __argsBatch__).size();
                }
            
                for (int __i__ = 0; __i__ < __length__; __i__++) {
                    Map<String, Object> __args__ = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (__argsBatch__ instanceof List) {
                        __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    cn.jpush.android.service.DownloadActivity __obj__ = new cn.jpush.android.service.DownloadActivity();
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    __resultList__.add(__obj__);
                }
            
                __methodResult__.success(__resultList__);
            });
            // factory
            put("ObjectFactory::create_batchcn_jpush_android_service_DownloadProvider__", (__argsBatch__, __methodResult__) -> {
                List<cn.jpush.android.service.DownloadProvider> __resultList__ = new ArrayList<>();
            
                int __length__ = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (__argsBatch__ instanceof Map) {
                    __length__ = (Integer) ((Map<String, Object>) __argsBatch__).get("length");
                }
                // or directly put the arg batch
                else if (__argsBatch__ instanceof List) {
                    __length__ = ((List<Map<String, Object>>) __argsBatch__).size();
                }
            
                for (int __i__ = 0; __i__ < __length__; __i__++) {
                    Map<String, Object> __args__ = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (__argsBatch__ instanceof List) {
                        __args__ = ((List<Map<String, Object>>) __argsBatch__).get(__i__);
                    }
            
                    // args
            
            
                    // create target object
                    cn.jpush.android.service.DownloadProvider __obj__ = new cn.jpush.android.service.DownloadProvider();
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    __resultList__.add(__obj__);
                }
            
                __methodResult__.success(__resultList__);
            });
        }};
    }
}
