//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

package me.yohom.jcore_fluttify.sub_handler;

import android.os.Bundle;
import android.util.Log;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import androidx.annotation.NonNull;
import io.flutter.embedding.engine.plugins.FlutterPlugin;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MethodCall;
import io.flutter.plugin.common.MethodChannel;
import io.flutter.plugin.common.PluginRegistry.Registrar;
import io.flutter.plugin.platform.PlatformViewRegistry;

import me.yohom.jcore_fluttify.JcoreFluttifyPlugin.Handler;

import static me.yohom.foundation_fluttify.FoundationFluttifyPluginKt.getEnableLog;
import static me.yohom.foundation_fluttify.FoundationFluttifyPluginKt.getHEAP;

@SuppressWarnings("ALL")
public class SubHandler2 {
    public static Map<String, Handler> getSubHandler(BinaryMessenger messenger) {
        return new HashMap<String, Handler>() {{
            // method
            put("cn.jiguang.api.JCoreInterface::getDaemonAction_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
            
            
                    // invoke native method
                    String result;
                    try {
                        result = cn.jiguang.api.JCoreInterface.getDaemonAction();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("cn.jiguang.api.JCoreInterface::setLocationReportDelay_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // ref arg
                    android.content.Context var0 = (android.content.Context) getHEAP().get((int) ((Map<String, Object>) args).get("var0"));
                    // jsonable arg
                    long var1 = (long) ((Map<String, Object>) args).get("var1");
            
                    // ref
            
            
                    // invoke native method
                    try {
                        cn.jiguang.api.JCoreInterface.setLocationReportDelay(var0, var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("cn.jiguang.api.JCoreInterface::setPowerSaveMode_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // ref arg
                    android.content.Context var0 = (android.content.Context) getHEAP().get((int) ((Map<String, Object>) args).get("var0"));
                    // jsonable arg
                    boolean var1 = (boolean) ((Map<String, Object>) args).get("var1");
            
                    // ref
            
            
                    // invoke native method
                    try {
                        cn.jiguang.api.JCoreInterface.setPowerSaveMode(var0, var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("cn.jiguang.api.JCoreInterface::testCountryCode_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    String var0 = (String) ((Map<String, Object>) args).get("var0");
            
                    // ref
            
            
                    // invoke native method
                    try {
                        cn.jiguang.api.JCoreInterface.testCountryCode(var0);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("cn.jiguang.api.JCoreInterface::setAccountId_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    String var0 = (String) ((Map<String, Object>) args).get("var0");
            
                    // ref
            
            
                    // invoke native method
                    try {
                        cn.jiguang.api.JCoreInterface.setAccountId(var0);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("cn.jiguang.api.JCoreInterface::getAccountId_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
            
            
                    // invoke native method
                    String result;
                    try {
                        result = cn.jiguang.api.JCoreInterface.getAccountId();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("cn.jiguang.api.JCoreInterface::getCommonConfigAppkey_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
            
            
                    // invoke native method
                    String result;
                    try {
                        result = cn.jiguang.api.JCoreInterface.getCommonConfigAppkey();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("cn.jiguang.api.JCoreInterface::triggerSceneCheck_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // ref arg
                    android.content.Context var0 = (android.content.Context) getHEAP().get((int) ((Map<String, Object>) args).get("var0"));
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
            
                    // ref
            
            
                    // invoke native method
                    try {
                        cn.jiguang.api.JCoreInterface.triggerSceneCheck(var0, var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("cn.jiguang.api.JCoreManager::init_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // ref arg
                    android.content.Context var0 = (android.content.Context) getHEAP().get((int) ((Map<String, Object>) args).get("var0"));
            
                    // ref
            
            
                    // invoke native method
                    try {
                        cn.jiguang.api.JCoreManager.init(var0);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("cn.jiguang.api.JCoreManager::changeLiveStatus_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    boolean var0 = (boolean) ((Map<String, Object>) args).get("var0");
            
                    // ref
            
            
                    // invoke native method
                    try {
                        cn.jiguang.api.JCoreManager.changeLiveStatus(var0);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("cn.jiguang.api.JCoreManager::setLBSEnable_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // ref arg
                    android.content.Context var0 = (android.content.Context) getHEAP().get((int) ((Map<String, Object>) args).get("var0"));
                    // jsonable arg
                    boolean var1 = (boolean) ((Map<String, Object>) args).get("var1");
            
                    // ref
            
            
                    // invoke native method
                    try {
                        cn.jiguang.api.JCoreManager.setLBSEnable(var0, var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("cn.jiguang.api.JCoreManager::setDebugMode_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    boolean var0 = (boolean) ((Map<String, Object>) args).get("var0");
            
                    // ref
            
            
                    // invoke native method
                    try {
                        cn.jiguang.api.JCoreManager.setDebugMode(var0);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("cn.jiguang.api.JCoreManager::getDebugMode_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
            
            
                    // invoke native method
                    boolean result;
                    try {
                        result = cn.jiguang.api.JCoreManager.getDebugMode();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("cn.jiguang.api.JCoreManager::isInternal_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
            
            
                    // invoke native method
                    boolean result;
                    try {
                        result = cn.jiguang.api.JCoreManager.isInternal();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("cn.jiguang.api.JCoreManager::addDispatchAction_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    String var0 = (String) ((Map<String, Object>) args).get("var0");
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                    // ref
            
            
                    // invoke native method
                    try {
                        cn.jiguang.api.JCoreManager.addDispatchAction(var0, var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("cn.jiguang.api.JCoreManager::onEvent__android_content_Context__String__int__String__android_os_Bundle__Object_batch", (argsBatch, methodResult) -> {
                List<Object> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // ref arg
                    android.content.Context var0 = (android.content.Context) getHEAP().get((int) ((Map<String, Object>) args).get("var0"));
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    int var2 = (int) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    String var3 = (String) ((Map<String, Object>) args).get("var3");
                    // ref arg
                    android.os.Bundle var4 = (android.os.Bundle) getHEAP().get((int) ((Map<String, Object>) args).get("var4"));
                    // jsonable arg
                    Object var5 = (Object) ((Map<String, Object>) args).get("var5");
            
                    // ref
            
            
                    // invoke native method
                    Object result;
                    try {
                        result = cn.jiguang.api.JCoreManager.onEvent(var0, var1, var2, var3, var4, var5);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    Object jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("cn.jiguang.api.JCoreManager::onEvent__android_content_Context__String__int__bool__String__android_os_Bundle__Object_batch", (argsBatch, methodResult) -> {
                List<Object> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // ref arg
                    android.content.Context var0 = (android.content.Context) getHEAP().get((int) ((Map<String, Object>) args).get("var0"));
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    int var2 = (int) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    boolean var3 = (boolean) ((Map<String, Object>) args).get("var3");
                    // jsonable arg
                    String var4 = (String) ((Map<String, Object>) args).get("var4");
                    // ref arg
                    android.os.Bundle var5 = (android.os.Bundle) getHEAP().get((int) ((Map<String, Object>) args).get("var5"));
                    // jsonable arg
                    Object var6 = (Object) ((Map<String, Object>) args).get("var6");
            
                    // ref
            
            
                    // invoke native method
                    Object result;
                    try {
                        result = cn.jiguang.api.JCoreManager.onEvent(var0, var1, var2, var3, var4, var5, var6);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    Object jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("cn.jiguang.api.JCoreManager::requestPermission_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // ref arg
                    android.content.Context var0 = (android.content.Context) getHEAP().get((int) ((Map<String, Object>) args).get("var0"));
            
                    // ref
            
            
                    // invoke native method
                    try {
                        cn.jiguang.api.JCoreManager.requestPermission(var0);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("cn.jiguang.api.JCoreManager::initCrashHandler_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // ref arg
                    android.content.Context var0 = (android.content.Context) getHEAP().get((int) ((Map<String, Object>) args).get("var0"));
            
                    // ref
            
            
                    // invoke native method
                    try {
                        cn.jiguang.api.JCoreManager.initCrashHandler(var0);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("cn.jiguang.api.JCoreManager::stopCrashHandler_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // ref arg
                    android.content.Context var0 = (android.content.Context) getHEAP().get((int) ((Map<String, Object>) args).get("var0"));
            
                    // ref
            
            
                    // invoke native method
                    try {
                        cn.jiguang.api.JCoreManager.stopCrashHandler(var0);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("cn.jiguang.api.JCoreManager::isTestEnv_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
            
            
                    // invoke native method
                    boolean result;
                    try {
                        result = cn.jiguang.api.JCoreManager.isTestEnv();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("cn.jiguang.api.JCoreManager::setSDKConfigs_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // ref arg
                    android.content.Context var0 = (android.content.Context) getHEAP().get((int) ((Map<String, Object>) args).get("var0"));
                    // ref arg
                    android.os.Bundle var1 = (android.os.Bundle) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
            
                    // ref
            
            
                    // invoke native method
                    try {
                        cn.jiguang.api.JCoreManager.setSDKConfigs(var0, var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("cn.jiguang.api.JCoreManager::getAppContext_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // ref arg
                    android.content.Context var0 = (android.content.Context) getHEAP().get((int) ((Map<String, Object>) args).get("var0"));
            
                    // ref
            
            
                    // invoke native method
                    android.content.Context result;
                    try {
                        result = cn.jiguang.api.JCoreManager.getAppContext(var0);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    Integer jsonableResult = null;
                    if (result != null) {
                        jsonableResult = result.hashCode();
                        getHEAP().put(jsonableResult, result);
                    }
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("cn.jiguang.api.ReportCallBack::onFinish_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    cn.jiguang.api.ReportCallBack ref = (cn.jiguang.api.ReportCallBack) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.onFinish(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("cn.jiguang.api.BaseLogger::getCommonTag_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    cn.jiguang.api.BaseLogger ref = (cn.jiguang.api.BaseLogger) getHEAP().get(refId);
            
                    // invoke native method
                    String result;
                    try {
                        result = ref.getCommonTag();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("cn.jiguang.api.BaseLogger::_d_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    String var2 = (String) ((Map<String, Object>) args).get("var2");
                    // jsonable arg
                    Object var3 = (Object) ((Map<String, Object>) args).get("var3");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    cn.jiguang.api.BaseLogger ref = (cn.jiguang.api.BaseLogger) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref._d(var1, var2, var3);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("cn.jiguang.api.BaseLogger::flushCached2File_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
            
            
                    // invoke native method
                    try {
                        cn.jiguang.api.BaseLogger.flushCached2File();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("cn.jiguang.api.JProtocol::parseHead_batch", (argsBatch, methodResult) -> {
                List<byte[]> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    Object var0 = (Object) ((Map<String, Object>) args).get("var0");
            
                    // ref
            
            
                    // invoke native method
                    byte[] result;
                    try {
                        result = cn.jiguang.api.JProtocol.parseHead(var0);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    byte[] jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("cn.jiguang.api.JProtocol::getCommand_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    cn.jiguang.api.JProtocol ref = (cn.jiguang.api.JProtocol) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.getCommand();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("cn.jiguang.api.JProtocol::getRid_batch", (argsBatch, methodResult) -> {
                List<Long> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    cn.jiguang.api.JProtocol ref = (cn.jiguang.api.JProtocol) getHEAP().get(refId);
            
                    // invoke native method
                    Long result;
                    try {
                        result = ref.getRid();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    Long jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("cn.jiguang.api.JProtocol::getJuid_batch", (argsBatch, methodResult) -> {
                List<Long> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    cn.jiguang.api.JProtocol ref = (cn.jiguang.api.JProtocol) getHEAP().get(refId);
            
                    // invoke native method
                    long result;
                    try {
                        result = ref.getJuid();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    long jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("cn.jiguang.api.JProtocol::getSid_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    cn.jiguang.api.JProtocol ref = (cn.jiguang.api.JProtocol) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.getSid();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("cn.jiguang.api.JProtocol::getVersion_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    cn.jiguang.api.JProtocol ref = (cn.jiguang.api.JProtocol) getHEAP().get(refId);
            
                    // invoke native method
                    int result;
                    try {
                        result = ref.getVersion();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("cn.jiguang.api.JProtocol::getName_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    cn.jiguang.api.JProtocol ref = (cn.jiguang.api.JProtocol) getHEAP().get(refId);
            
                    // invoke native method
                    String result;
                    try {
                        result = ref.getName();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("cn.jiguang.api.JProtocol::writeBodyAndToBytes_batch", (argsBatch, methodResult) -> {
                List<byte[]> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    cn.jiguang.api.JProtocol ref = (cn.jiguang.api.JProtocol) getHEAP().get(refId);
            
                    // invoke native method
                    byte[] result;
                    try {
                        result = ref.writeBodyAndToBytes();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    byte[] jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("cn.jiguang.api.MultiSpHelper::commitString_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // ref arg
                    android.content.Context var0 = (android.content.Context) getHEAP().get((int) ((Map<String, Object>) args).get("var0"));
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    String var2 = (String) ((Map<String, Object>) args).get("var2");
            
                    // ref
            
            
                    // invoke native method
                    try {
                        cn.jiguang.api.MultiSpHelper.commitString(var0, var1, var2);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("cn.jiguang.api.MultiSpHelper::getString_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // ref arg
                    android.content.Context var0 = (android.content.Context) getHEAP().get((int) ((Map<String, Object>) args).get("var0"));
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    String var2 = (String) ((Map<String, Object>) args).get("var2");
            
                    // ref
            
            
                    // invoke native method
                    String result;
                    try {
                        result = cn.jiguang.api.MultiSpHelper.getString(var0, var1, var2);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("cn.jiguang.api.MultiSpHelper::commitLong_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // ref arg
                    android.content.Context var0 = (android.content.Context) getHEAP().get((int) ((Map<String, Object>) args).get("var0"));
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    long var2 = (long) ((Map<String, Object>) args).get("var2");
            
                    // ref
            
            
                    // invoke native method
                    try {
                        cn.jiguang.api.MultiSpHelper.commitLong(var0, var1, var2);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("cn.jiguang.api.MultiSpHelper::getLong_batch", (argsBatch, methodResult) -> {
                List<Long> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // ref arg
                    android.content.Context var0 = (android.content.Context) getHEAP().get((int) ((Map<String, Object>) args).get("var0"));
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    long var2 = (long) ((Map<String, Object>) args).get("var2");
            
                    // ref
            
            
                    // invoke native method
                    long result;
                    try {
                        result = cn.jiguang.api.MultiSpHelper.getLong(var0, var1, var2);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    long jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("cn.jiguang.api.MultiSpHelper::commitInt_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // ref arg
                    android.content.Context var0 = (android.content.Context) getHEAP().get((int) ((Map<String, Object>) args).get("var0"));
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    int var2 = (int) ((Map<String, Object>) args).get("var2");
            
                    // ref
            
            
                    // invoke native method
                    try {
                        cn.jiguang.api.MultiSpHelper.commitInt(var0, var1, var2);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("cn.jiguang.api.MultiSpHelper::getInt_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // ref arg
                    android.content.Context var0 = (android.content.Context) getHEAP().get((int) ((Map<String, Object>) args).get("var0"));
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    int var2 = (int) ((Map<String, Object>) args).get("var2");
            
                    // ref
            
            
                    // invoke native method
                    int result;
                    try {
                        result = cn.jiguang.api.MultiSpHelper.getInt(var0, var1, var2);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    int jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("cn.jiguang.api.MultiSpHelper::commitBoolean_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // ref arg
                    android.content.Context var0 = (android.content.Context) getHEAP().get((int) ((Map<String, Object>) args).get("var0"));
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    boolean var2 = (boolean) ((Map<String, Object>) args).get("var2");
            
                    // ref
            
            
                    // invoke native method
                    try {
                        cn.jiguang.api.MultiSpHelper.commitBoolean(var0, var1, var2);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("cn.jiguang.api.MultiSpHelper::getBoolean_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // ref arg
                    android.content.Context var0 = (android.content.Context) getHEAP().get((int) ((Map<String, Object>) args).get("var0"));
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    boolean var2 = (boolean) ((Map<String, Object>) args).get("var2");
            
                    // ref
            
            
                    // invoke native method
                    boolean result;
                    try {
                        result = cn.jiguang.api.MultiSpHelper.getBoolean(var0, var1, var2);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("cn.jiguang.analytics.page.PushSA::onFragmentResume_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // ref arg
                    android.content.Context var1 = (android.content.Context) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
                    // jsonable arg
                    String var2 = (String) ((Map<String, Object>) args).get("var2");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    cn.jiguang.analytics.page.PushSA ref = (cn.jiguang.analytics.page.PushSA) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.onFragmentResume(var1, var2);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("cn.jiguang.analytics.page.PushSA::onFragmentPause_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // ref arg
                    android.content.Context var1 = (android.content.Context) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
                    // jsonable arg
                    String var2 = (String) ((Map<String, Object>) args).get("var2");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    cn.jiguang.analytics.page.PushSA ref = (cn.jiguang.analytics.page.PushSA) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.onFragmentPause(var1, var2);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("cn.jiguang.analytics.page.PushSA::getInterval_batch", (argsBatch, methodResult) -> {
                List<Long> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    cn.jiguang.analytics.page.PushSA ref = (cn.jiguang.analytics.page.PushSA) getHEAP().get(refId);
            
                    // invoke native method
                    long result;
                    try {
                        result = ref.getInterval();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    long jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("cn.jiguang.analytics.page.PushSA::setInterval_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    long var1 = (long) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    cn.jiguang.analytics.page.PushSA ref = (cn.jiguang.analytics.page.PushSA) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setInterval(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("cn.jiguang.analytics.page.PushSA::isStatEnable_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    cn.jiguang.analytics.page.PushSA ref = (cn.jiguang.analytics.page.PushSA) getHEAP().get(refId);
            
                    // invoke native method
                    boolean result;
                    try {
                        result = ref.isStatEnable();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("cn.jiguang.analytics.page.PushSA::setStatEnable_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    boolean var1 = (boolean) ((Map<String, Object>) args).get("var1");
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    cn.jiguang.analytics.page.PushSA ref = (cn.jiguang.analytics.page.PushSA) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.setStatEnable(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("cn.jiguang.analytics.page.PushSA::onKillProcess_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // ref arg
                    android.content.Context var1 = (android.content.Context) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    cn.jiguang.analytics.page.PushSA ref = (cn.jiguang.analytics.page.PushSA) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.onKillProcess(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("cn.jiguang.analytics.page.PushSA::getInstance_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
            
            
                    // invoke native method
                    cn.jiguang.analytics.page.PushSA result;
                    try {
                        result = cn.jiguang.analytics.page.PushSA.getInstance();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    Integer jsonableResult = null;
                    if (result != null) {
                        jsonableResult = result.hashCode();
                        getHEAP().put(jsonableResult, result);
                    }
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("cn.jiguang.analytics.page.PushSA::onResume_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // ref arg
                    android.content.Context var1 = (android.content.Context) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    cn.jiguang.analytics.page.PushSA ref = (cn.jiguang.analytics.page.PushSA) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.onResume(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("cn.jiguang.analytics.page.PushSA::onPause_batch", (argsBatch, methodResult) -> {
                List<String> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // ref arg
                    android.content.Context var1 = (android.content.Context) getHEAP().get((int) ((Map<String, Object>) args).get("var1"));
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    cn.jiguang.analytics.page.PushSA ref = (cn.jiguang.analytics.page.PushSA) getHEAP().get(refId);
            
                    // invoke native method
                    try {
                        ref.onPause(var1);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    String jsonableResult = "success";
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("cn.jpush.android.service.DataProvider::onCreate_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    cn.jpush.android.service.DataProvider ref = (cn.jpush.android.service.DataProvider) getHEAP().get(refId);
            
                    // invoke native method
                    boolean result;
                    try {
                        result = ref.onCreate();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("cn.jpush.android.service.DataProvider::call_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    String var2 = (String) ((Map<String, Object>) args).get("var2");
                    // ref arg
                    android.os.Bundle var3 = (android.os.Bundle) getHEAP().get((int) ((Map<String, Object>) args).get("var3"));
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    cn.jpush.android.service.DataProvider ref = (cn.jpush.android.service.DataProvider) getHEAP().get(refId);
            
                    // invoke native method
                    android.os.Bundle result;
                    try {
                        result = ref.call(var1, var2, var3);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    Integer jsonableResult = null;
                    if (result != null) {
                        jsonableResult = result.hashCode();
                        getHEAP().put(jsonableResult, result);
                    }
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("cn.jpush.android.service.DownloadProvider::onCreate_batch", (argsBatch, methodResult) -> {
                List<Boolean> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
            
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    cn.jpush.android.service.DownloadProvider ref = (cn.jpush.android.service.DownloadProvider) getHEAP().get(refId);
            
                    // invoke native method
                    boolean result;
                    try {
                        result = ref.onCreate();
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    boolean jsonableResult = result;
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // method
            put("cn.jpush.android.service.DownloadProvider::call_batch", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                for (int i = 0; i < ((List<Map<String, Object>>) argsBatch).size(); i++) {
                    Map<String, Object> args = ((List<Map<String, Object>>) argsBatch).get(i);
            
                    // args
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    String var2 = (String) ((Map<String, Object>) args).get("var2");
                    // ref arg
                    android.os.Bundle var3 = (android.os.Bundle) getHEAP().get((int) ((Map<String, Object>) args).get("var3"));
            
                    // ref
                    int refId = (int) ((Map<String, Object>) args).get("refId");
                    cn.jpush.android.service.DownloadProvider ref = (cn.jpush.android.service.DownloadProvider) getHEAP().get(refId);
            
                    // invoke native method
                    android.os.Bundle result;
                    try {
                        result = ref.call(var1, var2, var3);
                    } catch (Throwable throwable) {
                        throwable.printStackTrace();
                        if (getEnableLog()) {
                            Log.d("Current HEAP: ", getHEAP().toString());
                        }
                        methodResult.error(throwable.getMessage(), null, null);
                        return;
                    }
            
                    // convert result to jsonable result
                    Integer jsonableResult = null;
                    if (result != null) {
                        jsonableResult = result.hashCode();
                        getHEAP().put(jsonableResult, result);
                    }
            
                    resultList.add(jsonableResult);
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::createcn_jiguang_net_HttpRequest__String", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: cn_jiguang_net_HttpRequest__String");
            
                // args
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                // create target object
                cn.jiguang.net.HttpRequest obj = new cn.jiguang.net.HttpRequest(var1);
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcn_jiguang_net_HttpRequest__String__Map_String_String_", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: cn_jiguang_net_HttpRequest__String__Map_String_String_");
            
                // args
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) args).get("var1");
                // jsonable arg
                Map<String,String> var2 = (Map<String,String>) ((Map<String, Object>) args).get("var2");
            
                // create target object
                cn.jiguang.net.HttpRequest obj = new cn.jiguang.net.HttpRequest(var1, var2);
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcn_jiguang_net_HttpUtils__", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: cn_jiguang_net_HttpUtils__");
            
                // args
            
            
                // create target object
                cn.jiguang.net.HttpUtils obj = new cn.jiguang.net.HttpUtils();
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcn_jiguang_net_HttpResponse__String", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: cn_jiguang_net_HttpResponse__String");
            
                // args
                // jsonable arg
                String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                // create target object
                cn.jiguang.net.HttpResponse obj = new cn.jiguang.net.HttpResponse(var1);
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcn_jiguang_net_HttpResponse__", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: cn_jiguang_net_HttpResponse__");
            
                // args
            
            
                // create target object
                cn.jiguang.net.HttpResponse obj = new cn.jiguang.net.HttpResponse();
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcn_jiguang_internal_JConstants__", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: cn_jiguang_internal_JConstants__");
            
                // args
            
            
                // create target object
                cn.jiguang.internal.JConstants obj = new cn.jiguang.internal.JConstants();
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcn_jiguang_internal_ActionManager__", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: cn_jiguang_internal_ActionManager__");
            
                // args
            
            
                // create target object
                cn.jiguang.internal.ActionManager obj = new cn.jiguang.internal.ActionManager();
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcn_jiguang_android_BuildConfig__", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: cn_jiguang_android_BuildConfig__");
            
                // args
            
            
                // create target object
                cn.jiguang.android.BuildConfig obj = new cn.jiguang.android.BuildConfig();
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcn_jiguang_dy_Protocol__", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: cn_jiguang_dy_Protocol__");
            
                // args
            
            
                // create target object
                cn.jiguang.dy.Protocol obj = new cn.jiguang.dy.Protocol();
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcn_jiguang_api_utils_ByteBufferUtils__", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: cn_jiguang_api_utils_ByteBufferUtils__");
            
                // args
            
            
                // create target object
                cn.jiguang.api.utils.ByteBufferUtils obj = new cn.jiguang.api.utils.ByteBufferUtils();
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcn_jiguang_api_utils_OutputDataUtil__int", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: cn_jiguang_api_utils_OutputDataUtil__int");
            
                // args
                // jsonable arg
                int var1 = (int) ((Map<String, Object>) args).get("var1");
            
                // create target object
                cn.jiguang.api.utils.OutputDataUtil obj = new cn.jiguang.api.utils.OutputDataUtil(var1);
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcn_jiguang_api_utils_OutputDataUtil__", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: cn_jiguang_api_utils_OutputDataUtil__");
            
                // args
            
            
                // create target object
                cn.jiguang.api.utils.OutputDataUtil obj = new cn.jiguang.api.utils.OutputDataUtil();
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcn_jiguang_api_utils_ProtocolUtil__", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: cn_jiguang_api_utils_ProtocolUtil__");
            
                // args
            
            
                // create target object
                cn.jiguang.api.utils.ProtocolUtil obj = new cn.jiguang.api.utils.ProtocolUtil();
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcn_jiguang_api_JCoreInterface__", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: cn_jiguang_api_JCoreInterface__");
            
                // args
            
            
                // create target object
                cn.jiguang.api.JCoreInterface obj = new cn.jiguang.api.JCoreInterface();
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcn_jiguang_api_JCoreManager__", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: cn_jiguang_api_JCoreManager__");
            
                // args
            
            
                // create target object
                cn.jiguang.api.JCoreManager obj = new cn.jiguang.api.JCoreManager();
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcn_jcore_client_android_BuildConfig__", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: cn_jcore_client_android_BuildConfig__");
            
                // args
            
            
                // create target object
                cn.jcore.client.android.BuildConfig obj = new cn.jcore.client.android.BuildConfig();
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcn_jpush_android_service_DActivity__", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: cn_jpush_android_service_DActivity__");
            
                // args
            
            
                // create target object
                cn.jpush.android.service.DActivity obj = new cn.jpush.android.service.DActivity();
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcn_jpush_android_service_DataProvider__", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: cn_jpush_android_service_DataProvider__");
            
                // args
            
            
                // create target object
                cn.jpush.android.service.DataProvider obj = new cn.jpush.android.service.DataProvider();
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcn_jpush_android_service_DownloadActivity__", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: cn_jpush_android_service_DownloadActivity__");
            
                // args
            
            
                // create target object
                cn.jpush.android.service.DownloadActivity obj = new cn.jpush.android.service.DownloadActivity();
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::createcn_jpush_android_service_DownloadProvider__", (args, methodResult) -> {
                Log.d("ObjectFactory", "创建对象: cn_jpush_android_service_DownloadProvider__");
            
                // args
            
            
                // create target object
                cn.jpush.android.service.DownloadProvider obj = new cn.jpush.android.service.DownloadProvider();
                getHEAP().put(obj.hashCode(), obj);
            
                // print current HEAP
                if (getEnableLog()) {
                    Log.d("ObjectFactory", "HEAP: " + getHEAP());
                }
            
                methodResult.success(obj.hashCode());
            });
            // factory
            put("ObjectFactory::create_batchcn_jiguang_net_HttpRequest__String", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int i = 0; i < length; i++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(i);
                    }
            
                    // args
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                    // create target object
                    cn.jiguang.net.HttpRequest obj = new cn.jiguang.net.HttpRequest(var1);
                    getHEAP().put(obj.hashCode(), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(obj.hashCode());
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcn_jiguang_net_HttpRequest__String__Map_String_String_", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int i = 0; i < length; i++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(i);
                    }
            
                    // args
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
                    // jsonable arg
                    Map<String,String> var2 = (Map<String,String>) ((Map<String, Object>) args).get("var2");
            
                    // create target object
                    cn.jiguang.net.HttpRequest obj = new cn.jiguang.net.HttpRequest(var1, var2);
                    getHEAP().put(obj.hashCode(), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(obj.hashCode());
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcn_jiguang_net_HttpUtils__", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int i = 0; i < length; i++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(i);
                    }
            
                    // args
            
            
                    // create target object
                    cn.jiguang.net.HttpUtils obj = new cn.jiguang.net.HttpUtils();
                    getHEAP().put(obj.hashCode(), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(obj.hashCode());
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcn_jiguang_net_HttpResponse__String", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int i = 0; i < length; i++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(i);
                    }
            
                    // args
                    // jsonable arg
                    String var1 = (String) ((Map<String, Object>) args).get("var1");
            
                    // create target object
                    cn.jiguang.net.HttpResponse obj = new cn.jiguang.net.HttpResponse(var1);
                    getHEAP().put(obj.hashCode(), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(obj.hashCode());
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcn_jiguang_net_HttpResponse__", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int i = 0; i < length; i++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(i);
                    }
            
                    // args
            
            
                    // create target object
                    cn.jiguang.net.HttpResponse obj = new cn.jiguang.net.HttpResponse();
                    getHEAP().put(obj.hashCode(), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(obj.hashCode());
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcn_jiguang_internal_JConstants__", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int i = 0; i < length; i++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(i);
                    }
            
                    // args
            
            
                    // create target object
                    cn.jiguang.internal.JConstants obj = new cn.jiguang.internal.JConstants();
                    getHEAP().put(obj.hashCode(), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(obj.hashCode());
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcn_jiguang_internal_ActionManager__", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int i = 0; i < length; i++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(i);
                    }
            
                    // args
            
            
                    // create target object
                    cn.jiguang.internal.ActionManager obj = new cn.jiguang.internal.ActionManager();
                    getHEAP().put(obj.hashCode(), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(obj.hashCode());
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcn_jiguang_android_BuildConfig__", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int i = 0; i < length; i++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(i);
                    }
            
                    // args
            
            
                    // create target object
                    cn.jiguang.android.BuildConfig obj = new cn.jiguang.android.BuildConfig();
                    getHEAP().put(obj.hashCode(), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(obj.hashCode());
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcn_jiguang_dy_Protocol__", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int i = 0; i < length; i++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(i);
                    }
            
                    // args
            
            
                    // create target object
                    cn.jiguang.dy.Protocol obj = new cn.jiguang.dy.Protocol();
                    getHEAP().put(obj.hashCode(), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(obj.hashCode());
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcn_jiguang_api_utils_ByteBufferUtils__", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int i = 0; i < length; i++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(i);
                    }
            
                    // args
            
            
                    // create target object
                    cn.jiguang.api.utils.ByteBufferUtils obj = new cn.jiguang.api.utils.ByteBufferUtils();
                    getHEAP().put(obj.hashCode(), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(obj.hashCode());
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcn_jiguang_api_utils_OutputDataUtil__int", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int i = 0; i < length; i++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(i);
                    }
            
                    // args
                    // jsonable arg
                    int var1 = (int) ((Map<String, Object>) args).get("var1");
            
                    // create target object
                    cn.jiguang.api.utils.OutputDataUtil obj = new cn.jiguang.api.utils.OutputDataUtil(var1);
                    getHEAP().put(obj.hashCode(), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(obj.hashCode());
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcn_jiguang_api_utils_OutputDataUtil__", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int i = 0; i < length; i++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(i);
                    }
            
                    // args
            
            
                    // create target object
                    cn.jiguang.api.utils.OutputDataUtil obj = new cn.jiguang.api.utils.OutputDataUtil();
                    getHEAP().put(obj.hashCode(), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(obj.hashCode());
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcn_jiguang_api_utils_ProtocolUtil__", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int i = 0; i < length; i++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(i);
                    }
            
                    // args
            
            
                    // create target object
                    cn.jiguang.api.utils.ProtocolUtil obj = new cn.jiguang.api.utils.ProtocolUtil();
                    getHEAP().put(obj.hashCode(), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(obj.hashCode());
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcn_jiguang_api_JCoreInterface__", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int i = 0; i < length; i++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(i);
                    }
            
                    // args
            
            
                    // create target object
                    cn.jiguang.api.JCoreInterface obj = new cn.jiguang.api.JCoreInterface();
                    getHEAP().put(obj.hashCode(), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(obj.hashCode());
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcn_jiguang_api_JCoreManager__", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int i = 0; i < length; i++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(i);
                    }
            
                    // args
            
            
                    // create target object
                    cn.jiguang.api.JCoreManager obj = new cn.jiguang.api.JCoreManager();
                    getHEAP().put(obj.hashCode(), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(obj.hashCode());
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcn_jcore_client_android_BuildConfig__", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int i = 0; i < length; i++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(i);
                    }
            
                    // args
            
            
                    // create target object
                    cn.jcore.client.android.BuildConfig obj = new cn.jcore.client.android.BuildConfig();
                    getHEAP().put(obj.hashCode(), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(obj.hashCode());
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcn_jpush_android_service_DActivity__", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int i = 0; i < length; i++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(i);
                    }
            
                    // args
            
            
                    // create target object
                    cn.jpush.android.service.DActivity obj = new cn.jpush.android.service.DActivity();
                    getHEAP().put(obj.hashCode(), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(obj.hashCode());
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcn_jpush_android_service_DataProvider__", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int i = 0; i < length; i++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(i);
                    }
            
                    // args
            
            
                    // create target object
                    cn.jpush.android.service.DataProvider obj = new cn.jpush.android.service.DataProvider();
                    getHEAP().put(obj.hashCode(), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(obj.hashCode());
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcn_jpush_android_service_DownloadActivity__", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int i = 0; i < length; i++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(i);
                    }
            
                    // args
            
            
                    // create target object
                    cn.jpush.android.service.DownloadActivity obj = new cn.jpush.android.service.DownloadActivity();
                    getHEAP().put(obj.hashCode(), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(obj.hashCode());
                }
            
                methodResult.success(resultList);
            });
            // factory
            put("ObjectFactory::create_batchcn_jpush_android_service_DownloadProvider__", (argsBatch, methodResult) -> {
                List<Integer> resultList = new ArrayList<>();
            
                int length = 0;
                // when batch size is 0, dart side will put a map with key 'length' to indicate the length
                // of this batch
                if (argsBatch instanceof Map) {
                    length = (Integer) ((Map<String, Object>) argsBatch).get("length");
                }
                // or directly put the arg batch
                else if (argsBatch instanceof List) {
                    length = ((List<Map<String, Object>>) argsBatch).size();
                }
            
                for (int i = 0; i < length; i++) {
                    Map<String, Object> args = new HashMap<>();
                    // only when arg batch is not empty, java side needs to parse args;
                    if (argsBatch instanceof List) {
                        args = ((List<Map<String, Object>>) argsBatch).get(i);
                    }
            
                    // args
            
            
                    // create target object
                    cn.jpush.android.service.DownloadProvider obj = new cn.jpush.android.service.DownloadProvider();
                    getHEAP().put(obj.hashCode(), obj);
            
                    // print current HEAP
                    if (getEnableLog()) {
                        Log.d("ObjectFactory", "HEAP: " + getHEAP());
                    }
            
                    resultList.add(obj.hashCode());
                }
            
                methodResult.success(resultList);
            });
        }};
    }
}
